
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  optional_declaration_list procedure_definition
2: optional_declaration_list ->  <empty>
3: optional_declaration_list ->  variable_declaration_list
4: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'
5: #0001 ->  <empty>
6: #0002 ->  <empty>
7: optional_variable_declaration_list ->  <empty>
8: optional_variable_declaration_list ->  variable_declaration_list
9: variable_declaration_list ->  variable_declaration
10: variable_declaration_list ->  variable_declaration_list variable_declaration
11: variable_declaration (';') ->  declaration ';'
12: declaration (INTEGER) ->  INTEGER NAME
13: declaration (FLOAT) ->  FLOAT NAME
14: declaration (DOUBLE) ->  DOUBLE NAME
15: basic_block_list ->  basic_block_list basic_block
16: basic_block_list ->  basic_block
17: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list
18: executable_statement_list ->  assignment_statement_list
19: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
20: assignment_statement_list ->  <empty>
21: assignment_statement_list ->  assignment_statement_list assignment_statement
22: assignment_statement (ASSIGN) ->  variable ASSIGN comparision_expression ';'
23: assignment_statement ->  if_block
24: assignment_statement ->  goto_statement
25: if_block (IF) ->  IF '(' comparision_expression ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';'
26: goto_statement (GOTO) ->  GOTO BBNUM ';'
27: comparision_expression (GT) ->  comparision_expression GT comparision_expression
28: comparision_expression (LT) ->  comparision_expression LT comparision_expression
29: comparision_expression (GE) ->  comparision_expression GE comparision_expression
30: comparision_expression (LE) ->  comparision_expression LE comparision_expression
31: comparision_expression (EQ) ->  comparision_expression EQ comparision_expression
32: comparision_expression (NE) ->  comparision_expression NE comparision_expression
33: comparision_expression ->  arith_expression
34: arith_expression ('-') ->  '-' variable
35: arith_expression ('-') ->  '-' constant
36: arith_expression ('-') ->  '-' '(' comparision_expression ')'
37: arith_expression ('(') ->  '(' FLOAT ')' variable
38: arith_expression ('(') ->  '(' FLOAT ')' constant
39: arith_expression ('(') ->  '(' FLOAT ')' '(' comparision_expression ')'
40: arith_expression ('(') ->  '(' INTEGER ')' variable
41: arith_expression ('(') ->  '(' INTEGER ')' constant
42: arith_expression ('(') ->  '(' INTEGER ')' '(' comparision_expression ')'
43: arith_expression ('(') ->  '(' DOUBLE ')' variable
44: arith_expression ('(') ->  '(' DOUBLE ')' constant
45: arith_expression ('(') ->  '(' DOUBLE ')' '(' comparision_expression ')'
46: arith_expression ('(') ->  '(' comparision_expression ')'
47: arith_expression ->  variable
48: arith_expression ->  constant
49: arith_expression ('*') ->  arith_expression '*' arith_expression
50: arith_expression ('/') ->  arith_expression '/' arith_expression
51: arith_expression ('+') ->  arith_expression '+' arith_expression
52: arith_expression ('-') ->  arith_expression '-' arith_expression
53: variable (NAME) ->  NAME
54: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
55: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
56: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BBNUM
   259: FLOAT_NUMBER
   260: NAME
   261: RETURN
   262: INTEGER
   263: FLOAT
   264: DOUBLE
   265: IF
   266: ELSE
   267: GOTO
   268: ASSIGN
   269: NE
   270: EQ
   271: LT
   272: LE
   273: GT
   274: GE
    43: '+'
    45: '-'
    42: '*'
    47: '/'
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
56: program_$ ->  . program 
  0:   On program to state 1
  1:   On optional_declaration_list to state 2
  2:   On variable_declaration_list to state 3
  3:   On variable_declaration to state 4
  4:   On declaration to state 5
  5:   On INTEGER to state 6
  6:   On FLOAT to state 7
  7:   On DOUBLE to state 8
  Reduce by 2: optional_declaration_list ->  . 


State 1:
56: program_$ -> program  . 


State 2:
1: program -> optional_declaration_list  . procedure_definition 
  0:   On procedure_definition to state 9
  1:   On NAME to state 10


State 3:
3: optional_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 11
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  Reduce by 3: optional_declaration_list -> variable_declaration_list  . 


State 4:
9: variable_declaration_list -> variable_declaration  . 
  Reduce by 9: variable_declaration_list -> variable_declaration  . 


State 5:
11: variable_declaration -> declaration  . ';' 
  0:   On ';' to state 12


State 6:
12: declaration -> INTEGER  . NAME 
  0:   On NAME to state 13


State 7:
13: declaration -> FLOAT  . NAME 
  0:   On NAME to state 14


State 8:
14: declaration -> DOUBLE  . NAME 
  0:   On NAME to state 15


State 9:
1: program -> optional_declaration_list procedure_definition  . 
  Reduce by 1: program -> optional_declaration_list procedure_definition  . 


State 10:
4: procedure_definition -> NAME  . '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '(' to state 16


State 11:
10: variable_declaration_list -> variable_declaration_list variable_declaration  . 
  Reduce by 10: variable_declaration_list -> variable_declaration_list variable_declaration  . 


State 12:
11: variable_declaration -> declaration ';'  . 
  Reduce by 11: variable_declaration -> declaration ';'  . 


State 13:
12: declaration -> INTEGER NAME  . 
  Reduce by 12: declaration -> INTEGER NAME  . 


State 14:
13: declaration -> FLOAT NAME  . 
  Reduce by 13: declaration -> FLOAT NAME  . 


State 15:
14: declaration -> DOUBLE NAME  . 
  Reduce by 14: declaration -> DOUBLE NAME  . 


State 16:
4: procedure_definition -> NAME '('  . ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On ')' to state 17


State 17:
4: procedure_definition -> NAME '(' ')'  . #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On #0001 to state 18
  Reduce by 5: #0001 ->  . 


State 18:
4: procedure_definition -> NAME '(' ')' #0001  . '{' optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On '{' to state 19


State 19:
4: procedure_definition -> NAME '(' ')' #0001 '{'  . optional_variable_declaration_list #0002 basic_block_list '}' 
  0:   On optional_variable_declaration_list to state 20
  1:   On variable_declaration_list to state 21
  2:   On variable_declaration to state 4
  3:   On declaration to state 5
  4:   On INTEGER to state 6
  5:   On FLOAT to state 7
  6:   On DOUBLE to state 8
  Reduce by 7: optional_variable_declaration_list ->  . 


State 20:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list  . #0002 basic_block_list '}' 
  0:   On #0002 to state 22
  Reduce by 6: #0002 ->  . 


State 21:
8: optional_variable_declaration_list -> variable_declaration_list  . 
10: variable_declaration_list -> variable_declaration_list  . variable_declaration 
  0:   On variable_declaration to state 11
  1:   On declaration to state 5
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  Reduce by 8: optional_variable_declaration_list -> variable_declaration_list  . 


State 22:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002  . basic_block_list '}' 
  0:   On basic_block_list to state 23
  1:   On basic_block to state 24
  2:   On BBNUM to state 25


State 23:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list  . '}' 
15: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 26
  1:   On basic_block to state 27
  2:   On BBNUM to state 25


State 24:
16: basic_block_list -> basic_block  . 
  Reduce by 16: basic_block_list -> basic_block  . 


State 25:
17: basic_block -> BBNUM  . ':' executable_statement_list 
  0:   On ':' to state 28


State 26:
4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 
  Reduce by 4: procedure_definition -> NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'  . 


State 27:
15: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 15: basic_block_list -> basic_block_list basic_block  . 


State 28:
17: basic_block -> BBNUM ':'  . executable_statement_list 
  0:   On executable_statement_list to state 29
  1:   On assignment_statement_list to state 30
  Reduce by 20: assignment_statement_list ->  . 


State 29:
17: basic_block -> BBNUM ':' executable_statement_list  . 
  Reduce by 17: basic_block -> BBNUM ':' executable_statement_list  . 


State 30:
18: executable_statement_list -> assignment_statement_list  . 
19: executable_statement_list -> assignment_statement_list  . RETURN ';' 
21: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 31
  1:   On assignment_statement to state 32
  2:   On variable to state 33
  3:   On if_block to state 34
  4:   On goto_statement to state 35
  5:   On NAME to state 36
  6:   On IF to state 37
  7:   On GOTO to state 38
  Reduce by 18: executable_statement_list -> assignment_statement_list  . 


State 31:
19: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 39


State 32:
21: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 21: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 33:
22: assignment_statement -> variable  . ASSIGN comparision_expression ';' 
  0:   On ASSIGN to state 40


State 34:
23: assignment_statement -> if_block  . 
  Reduce by 23: assignment_statement -> if_block  . 


State 35:
24: assignment_statement -> goto_statement  . 
  Reduce by 24: assignment_statement -> goto_statement  . 


State 36:
53: variable -> NAME  . 
  Reduce by 53: variable -> NAME  . 


State 37:
25: if_block -> IF  . '(' comparision_expression ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On '(' to state 41


State 38:
26: goto_statement -> GOTO  . BBNUM ';' 
  0:   On BBNUM to state 42


State 39:
19: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 19: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 40:
22: assignment_statement -> variable ASSIGN  . comparision_expression ';' 
  0:   On comparision_expression to state 43
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 41:
25: if_block -> IF '('  . comparision_expression ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On comparision_expression to state 51
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 42:
26: goto_statement -> GOTO BBNUM  . ';' 
  0:   On ';' to state 52


State 43:
22: assignment_statement -> variable ASSIGN comparision_expression  . ';' 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ';' to state 53
  1:   On GT to state 54
  2:   On LT to state 55
  3:   On GE to state 56
  4:   On LE to state 57
  5:   On EQ to state 58
  6:   On NE to state 59


State 44:
33: comparision_expression -> arith_expression  . 
49: arith_expression -> arith_expression  . '*' arith_expression 
50: arith_expression -> arith_expression  . '/' arith_expression 
51: arith_expression -> arith_expression  . '+' arith_expression 
52: arith_expression -> arith_expression  . '-' arith_expression 
  0:   On '*' to state 60
  1:   On '/' to state 61
  2:   On '+' to state 62
  3:   On '-' to state 63
  Reduce by 33: comparision_expression -> arith_expression  . 


State 45:
34: arith_expression -> '-'  . variable 
35: arith_expression -> '-'  . constant 
36: arith_expression -> '-'  . '(' comparision_expression ')' 
  0:   On variable to state 64
  1:   On constant to state 65
  2:   On '(' to state 66
  3:   On NAME to state 36
  4:   On INTEGER_NUMBER to state 49
  5:   On FLOAT_NUMBER to state 50


State 46:
37: arith_expression -> '('  . FLOAT ')' variable 
38: arith_expression -> '('  . FLOAT ')' constant 
39: arith_expression -> '('  . FLOAT ')' '(' comparision_expression ')' 
40: arith_expression -> '('  . INTEGER ')' variable 
41: arith_expression -> '('  . INTEGER ')' constant 
42: arith_expression -> '('  . INTEGER ')' '(' comparision_expression ')' 
43: arith_expression -> '('  . DOUBLE ')' variable 
44: arith_expression -> '('  . DOUBLE ')' constant 
45: arith_expression -> '('  . DOUBLE ')' '(' comparision_expression ')' 
46: arith_expression -> '('  . comparision_expression ')' 
  0:   On FLOAT to state 67
  1:   On INTEGER to state 68
  2:   On DOUBLE to state 69
  3:   On comparision_expression to state 70
  4:   On arith_expression to state 44
  5:   On '-' to state 45
  6:   On '(' to state 46
  7:   On variable to state 47
  8:   On constant to state 48
  9:   On NAME to state 36
  10:   On INTEGER_NUMBER to state 49
  11:   On FLOAT_NUMBER to state 50


State 47:
47: arith_expression -> variable  . 
  Reduce by 47: arith_expression -> variable  . 


State 48:
48: arith_expression -> constant  . 
  Reduce by 48: arith_expression -> constant  . 


State 49:
54: constant -> INTEGER_NUMBER  . 
  Reduce by 54: constant -> INTEGER_NUMBER  . 


State 50:
55: constant -> FLOAT_NUMBER  . 
  Reduce by 55: constant -> FLOAT_NUMBER  . 


State 51:
25: if_block -> IF '(' comparision_expression  . ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 71
  1:   On GT to state 54
  2:   On LT to state 55
  3:   On GE to state 56
  4:   On LE to state 57
  5:   On EQ to state 58
  6:   On NE to state 59


State 52:
26: goto_statement -> GOTO BBNUM ';'  . 
  Reduce by 26: goto_statement -> GOTO BBNUM ';'  . 


State 53:
22: assignment_statement -> variable ASSIGN comparision_expression ';'  . 
  Reduce by 22: assignment_statement -> variable ASSIGN comparision_expression ';'  . 


State 54:
27: comparision_expression -> comparision_expression GT  . comparision_expression 
  0:   On comparision_expression to state 72
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 55:
28: comparision_expression -> comparision_expression LT  . comparision_expression 
  0:   On comparision_expression to state 73
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 56:
29: comparision_expression -> comparision_expression GE  . comparision_expression 
  0:   On comparision_expression to state 74
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 57:
30: comparision_expression -> comparision_expression LE  . comparision_expression 
  0:   On comparision_expression to state 75
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 58:
31: comparision_expression -> comparision_expression EQ  . comparision_expression 
  0:   On comparision_expression to state 76
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 59:
32: comparision_expression -> comparision_expression NE  . comparision_expression 
  0:   On comparision_expression to state 77
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 60:
49: arith_expression -> arith_expression '*'  . arith_expression 
  0:   On arith_expression to state 78
  1:   On '-' to state 45
  2:   On '(' to state 46
  3:   On variable to state 47
  4:   On constant to state 48
  5:   On NAME to state 36
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 61:
50: arith_expression -> arith_expression '/'  . arith_expression 
  0:   On arith_expression to state 79
  1:   On '-' to state 45
  2:   On '(' to state 46
  3:   On variable to state 47
  4:   On constant to state 48
  5:   On NAME to state 36
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 62:
51: arith_expression -> arith_expression '+'  . arith_expression 
  0:   On arith_expression to state 80
  1:   On '-' to state 45
  2:   On '(' to state 46
  3:   On variable to state 47
  4:   On constant to state 48
  5:   On NAME to state 36
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 63:
52: arith_expression -> arith_expression '-'  . arith_expression 
  0:   On arith_expression to state 81
  1:   On '-' to state 45
  2:   On '(' to state 46
  3:   On variable to state 47
  4:   On constant to state 48
  5:   On NAME to state 36
  6:   On INTEGER_NUMBER to state 49
  7:   On FLOAT_NUMBER to state 50


State 64:
34: arith_expression -> '-' variable  . 
  Reduce by 34: arith_expression -> '-' variable  . 


State 65:
35: arith_expression -> '-' constant  . 
  Reduce by 35: arith_expression -> '-' constant  . 


State 66:
36: arith_expression -> '-' '('  . comparision_expression ')' 
  0:   On comparision_expression to state 82
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 67:
37: arith_expression -> '(' FLOAT  . ')' variable 
38: arith_expression -> '(' FLOAT  . ')' constant 
39: arith_expression -> '(' FLOAT  . ')' '(' comparision_expression ')' 
  0:   On ')' to state 83


State 68:
40: arith_expression -> '(' INTEGER  . ')' variable 
41: arith_expression -> '(' INTEGER  . ')' constant 
42: arith_expression -> '(' INTEGER  . ')' '(' comparision_expression ')' 
  0:   On ')' to state 84


State 69:
43: arith_expression -> '(' DOUBLE  . ')' variable 
44: arith_expression -> '(' DOUBLE  . ')' constant 
45: arith_expression -> '(' DOUBLE  . ')' '(' comparision_expression ')' 
  0:   On ')' to state 85


State 70:
46: arith_expression -> '(' comparision_expression  . ')' 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 86
  1:   On GT to state 54
  2:   On LT to state 55
  3:   On GE to state 56
  4:   On LE to state 57
  5:   On EQ to state 58
  6:   On NE to state 59


State 71:
25: if_block -> IF '(' comparision_expression ')'  . GOTO BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On GOTO to state 87


State 72:
27: comparision_expression -> comparision_expression GT comparision_expression  . 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 54
  1 (removed by precedence):   On LT to state 55
  2 (removed by precedence):   On GE to state 56
  3 (removed by precedence):   On LE to state 57
  4 (removed by precedence):   On EQ to state 58
  5 (removed by precedence):   On NE to state 59
  Reduce by 27: comparision_expression -> comparision_expression GT comparision_expression  . 


State 73:
28: comparision_expression -> comparision_expression LT comparision_expression  . 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 54
  1 (removed by precedence):   On LT to state 55
  2 (removed by precedence):   On GE to state 56
  3 (removed by precedence):   On LE to state 57
  4 (removed by precedence):   On EQ to state 58
  5 (removed by precedence):   On NE to state 59
  Reduce by 28: comparision_expression -> comparision_expression LT comparision_expression  . 


State 74:
29: comparision_expression -> comparision_expression GE comparision_expression  . 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 54
  1 (removed by precedence):   On LT to state 55
  2 (removed by precedence):   On GE to state 56
  3 (removed by precedence):   On LE to state 57
  4 (removed by precedence):   On EQ to state 58
  5 (removed by precedence):   On NE to state 59
  Reduce by 29: comparision_expression -> comparision_expression GE comparision_expression  . 


State 75:
30: comparision_expression -> comparision_expression LE comparision_expression  . 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 54
  1 (removed by precedence):   On LT to state 55
  2 (removed by precedence):   On GE to state 56
  3 (removed by precedence):   On LE to state 57
  4 (removed by precedence):   On EQ to state 58
  5 (removed by precedence):   On NE to state 59
  Reduce by 30: comparision_expression -> comparision_expression LE comparision_expression  . 


State 76:
31: comparision_expression -> comparision_expression EQ comparision_expression  . 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On GT to state 54
  1:   On LT to state 55
  2:   On GE to state 56
  3:   On LE to state 57
  4 (removed by precedence):   On EQ to state 58
  5 (removed by precedence):   On NE to state 59
  Reduce by 31: comparision_expression -> comparision_expression EQ comparision_expression  . 


State 77:
32: comparision_expression -> comparision_expression NE comparision_expression  . 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On GT to state 54
  1:   On LT to state 55
  2:   On GE to state 56
  3:   On LE to state 57
  4 (removed by precedence):   On EQ to state 58
  5 (removed by precedence):   On NE to state 59
  Reduce by 32: comparision_expression -> comparision_expression NE comparision_expression  . 


State 78:
49: arith_expression -> arith_expression '*' arith_expression  . 
49: arith_expression -> arith_expression  . '*' arith_expression 
50: arith_expression -> arith_expression  . '/' arith_expression 
51: arith_expression -> arith_expression  . '+' arith_expression 
52: arith_expression -> arith_expression  . '-' arith_expression 
  0 (removed by precedence):   On '*' to state 60
  1 (removed by precedence):   On '/' to state 61
  2 (removed by precedence):   On '+' to state 62
  3 (removed by precedence):   On '-' to state 63
  Reduce by 49: arith_expression -> arith_expression '*' arith_expression  . 


State 79:
50: arith_expression -> arith_expression '/' arith_expression  . 
49: arith_expression -> arith_expression  . '*' arith_expression 
50: arith_expression -> arith_expression  . '/' arith_expression 
51: arith_expression -> arith_expression  . '+' arith_expression 
52: arith_expression -> arith_expression  . '-' arith_expression 
  0 (removed by precedence):   On '*' to state 60
  1 (removed by precedence):   On '/' to state 61
  2 (removed by precedence):   On '+' to state 62
  3 (removed by precedence):   On '-' to state 63
  Reduce by 50: arith_expression -> arith_expression '/' arith_expression  . 


State 80:
51: arith_expression -> arith_expression '+' arith_expression  . 
49: arith_expression -> arith_expression  . '*' arith_expression 
50: arith_expression -> arith_expression  . '/' arith_expression 
51: arith_expression -> arith_expression  . '+' arith_expression 
52: arith_expression -> arith_expression  . '-' arith_expression 
  0:   On '*' to state 60
  1:   On '/' to state 61
  2 (removed by precedence):   On '+' to state 62
  3 (removed by precedence):   On '-' to state 63
  Reduce by 51: arith_expression -> arith_expression '+' arith_expression  . 


State 81:
52: arith_expression -> arith_expression '-' arith_expression  . 
49: arith_expression -> arith_expression  . '*' arith_expression 
50: arith_expression -> arith_expression  . '/' arith_expression 
51: arith_expression -> arith_expression  . '+' arith_expression 
52: arith_expression -> arith_expression  . '-' arith_expression 
  0:   On '*' to state 60
  1:   On '/' to state 61
  2 (removed by precedence):   On '+' to state 62
  3 (removed by precedence):   On '-' to state 63
  Reduce by 52: arith_expression -> arith_expression '-' arith_expression  . 


State 82:
36: arith_expression -> '-' '(' comparision_expression  . ')' 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 88
  1:   On GT to state 54
  2:   On LT to state 55
  3:   On GE to state 56
  4:   On LE to state 57
  5:   On EQ to state 58
  6:   On NE to state 59


State 83:
37: arith_expression -> '(' FLOAT ')'  . variable 
38: arith_expression -> '(' FLOAT ')'  . constant 
39: arith_expression -> '(' FLOAT ')'  . '(' comparision_expression ')' 
  0:   On variable to state 89
  1:   On constant to state 90
  2:   On '(' to state 91
  3:   On NAME to state 36
  4:   On INTEGER_NUMBER to state 49
  5:   On FLOAT_NUMBER to state 50


State 84:
40: arith_expression -> '(' INTEGER ')'  . variable 
41: arith_expression -> '(' INTEGER ')'  . constant 
42: arith_expression -> '(' INTEGER ')'  . '(' comparision_expression ')' 
  0:   On variable to state 92
  1:   On constant to state 93
  2:   On '(' to state 94
  3:   On NAME to state 36
  4:   On INTEGER_NUMBER to state 49
  5:   On FLOAT_NUMBER to state 50


State 85:
43: arith_expression -> '(' DOUBLE ')'  . variable 
44: arith_expression -> '(' DOUBLE ')'  . constant 
45: arith_expression -> '(' DOUBLE ')'  . '(' comparision_expression ')' 
  0:   On variable to state 95
  1:   On constant to state 96
  2:   On '(' to state 97
  3:   On NAME to state 36
  4:   On INTEGER_NUMBER to state 49
  5:   On FLOAT_NUMBER to state 50


State 86:
46: arith_expression -> '(' comparision_expression ')'  . 
  Reduce by 46: arith_expression -> '(' comparision_expression ')'  . 


State 87:
25: if_block -> IF '(' comparision_expression ')' GOTO  . BBNUM ';' ELSE GOTO BBNUM ';' 
  0:   On BBNUM to state 98


State 88:
36: arith_expression -> '-' '(' comparision_expression ')'  . 
  Reduce by 36: arith_expression -> '-' '(' comparision_expression ')'  . 


State 89:
37: arith_expression -> '(' FLOAT ')' variable  . 
  Reduce by 37: arith_expression -> '(' FLOAT ')' variable  . 


State 90:
38: arith_expression -> '(' FLOAT ')' constant  . 
  Reduce by 38: arith_expression -> '(' FLOAT ')' constant  . 


State 91:
39: arith_expression -> '(' FLOAT ')' '('  . comparision_expression ')' 
  0:   On comparision_expression to state 99
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 92:
40: arith_expression -> '(' INTEGER ')' variable  . 
  Reduce by 40: arith_expression -> '(' INTEGER ')' variable  . 


State 93:
41: arith_expression -> '(' INTEGER ')' constant  . 
  Reduce by 41: arith_expression -> '(' INTEGER ')' constant  . 


State 94:
42: arith_expression -> '(' INTEGER ')' '('  . comparision_expression ')' 
  0:   On comparision_expression to state 100
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 95:
43: arith_expression -> '(' DOUBLE ')' variable  . 
  Reduce by 43: arith_expression -> '(' DOUBLE ')' variable  . 


State 96:
44: arith_expression -> '(' DOUBLE ')' constant  . 
  Reduce by 44: arith_expression -> '(' DOUBLE ')' constant  . 


State 97:
45: arith_expression -> '(' DOUBLE ')' '('  . comparision_expression ')' 
  0:   On comparision_expression to state 101
  1:   On arith_expression to state 44
  2:   On '-' to state 45
  3:   On '(' to state 46
  4:   On variable to state 47
  5:   On constant to state 48
  6:   On NAME to state 36
  7:   On INTEGER_NUMBER to state 49
  8:   On FLOAT_NUMBER to state 50


State 98:
25: if_block -> IF '(' comparision_expression ')' GOTO BBNUM  . ';' ELSE GOTO BBNUM ';' 
  0:   On ';' to state 102


State 99:
39: arith_expression -> '(' FLOAT ')' '(' comparision_expression  . ')' 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 103
  1:   On GT to state 54
  2:   On LT to state 55
  3:   On GE to state 56
  4:   On LE to state 57
  5:   On EQ to state 58
  6:   On NE to state 59


State 100:
42: arith_expression -> '(' INTEGER ')' '(' comparision_expression  . ')' 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 104
  1:   On GT to state 54
  2:   On LT to state 55
  3:   On GE to state 56
  4:   On LE to state 57
  5:   On EQ to state 58
  6:   On NE to state 59


State 101:
45: arith_expression -> '(' DOUBLE ')' '(' comparision_expression  . ')' 
27: comparision_expression -> comparision_expression  . GT comparision_expression 
28: comparision_expression -> comparision_expression  . LT comparision_expression 
29: comparision_expression -> comparision_expression  . GE comparision_expression 
30: comparision_expression -> comparision_expression  . LE comparision_expression 
31: comparision_expression -> comparision_expression  . EQ comparision_expression 
32: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 105
  1:   On GT to state 54
  2:   On LT to state 55
  3:   On GE to state 56
  4:   On LE to state 57
  5:   On EQ to state 58
  6:   On NE to state 59


State 102:
25: if_block -> IF '(' comparision_expression ')' GOTO BBNUM ';'  . ELSE GOTO BBNUM ';' 
  0:   On ELSE to state 106


State 103:
39: arith_expression -> '(' FLOAT ')' '(' comparision_expression ')'  . 
  Reduce by 39: arith_expression -> '(' FLOAT ')' '(' comparision_expression ')'  . 


State 104:
42: arith_expression -> '(' INTEGER ')' '(' comparision_expression ')'  . 
  Reduce by 42: arith_expression -> '(' INTEGER ')' '(' comparision_expression ')'  . 


State 105:
45: arith_expression -> '(' DOUBLE ')' '(' comparision_expression ')'  . 
  Reduce by 45: arith_expression -> '(' DOUBLE ')' '(' comparision_expression ')'  . 


State 106:
25: if_block -> IF '(' comparision_expression ')' GOTO BBNUM ';' ELSE  . GOTO BBNUM ';' 
  0:   On GOTO to state 107


State 107:
25: if_block -> IF '(' comparision_expression ')' GOTO BBNUM ';' ELSE GOTO  . BBNUM ';' 
  0:   On BBNUM to state 108


State 108:
25: if_block -> IF '(' comparision_expression ')' GOTO BBNUM ';' ELSE GOTO BBNUM  . ';' 
  0:   On ';' to state 109


State 109:
25: if_block -> IF '(' comparision_expression ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';'  . 
  Reduce by 25: if_block -> IF '(' comparision_expression ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';'  . 



