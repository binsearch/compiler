
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list #0001 procedure_decls procedure_list
2: #0001 ->  <empty>
3: program ->  procedure_decls procedure_list
4: procedure_decls (';') ->  type_declaration procedure_name ';' procedure_decls
5: procedure_decls ->  <empty>
6: procedure_list ->  procedure_name #0002 procedure_body #0003 procedure_list
7: #0002 ->  <empty>
8: #0003 ->  <empty>
9: procedure_list ->  <empty>
10: procedure_name (NAME) ->  NAME '(' argument_list ')'
11: procedure_name (NAME) ->  NAME '(' ')'
12: argument_list (',') ->  argument_list ',' argument
13: argument_list ->  argument
14: argument (NAME) ->  type_declaration NAME
15: procedure_body ('{') ->  '{' declaration_statement_list #0004 basic_block_list '}'
16: #0004 ->  <empty>
17: procedure_body ('{') ->  '{' basic_block_list '}'
18: declaration_statement_list ->  declaration_statement
19: declaration_statement_list ->  declaration_statement_list declaration_statement
20: declaration_statement (NAME) ->  type_declaration NAME ';'
21: type_declaration (INTEGER) ->  INTEGER
22: type_declaration (FLOAT) ->  FLOAT
23: type_declaration (DOUBLE) ->  DOUBLE
24: type_declaration (VOID) ->  VOID
25: basic_block_list ->  basic_block_list basic_block
26: basic_block_list ->  basic_block
27: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list
28: executable_statement_list ->  assignment_statement_list
29: executable_statement_list (RETURN) ->  assignment_statement_list RETURN return_value ';'
30: return_value ->  comparision_expression
31: return_value ->  <empty>
32: assignment_statement_list ->  <empty>
33: assignment_statement_list ->  assignment_statement_list assignment_statement
34: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP comparision_expression ';'
35: assignment_statement ->  if_block
36: assignment_statement ->  goto_statement
37: assignment_statement (';') ->  func_call ';'
38: if_block (IF) ->  IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'
39: goto_statement (GOTO) ->  GOTO BASIC_BLOCK ';'
40: comparision_expression ->  arith_expression
41: comparision_expression (GT) ->  comparision_expression GT comparision_expression
42: comparision_expression (LT) ->  comparision_expression LT comparision_expression
43: comparision_expression (GE) ->  comparision_expression GE comparision_expression
44: comparision_expression (LE) ->  comparision_expression LE comparision_expression
45: comparision_expression (EQ) ->  comparision_expression EQ comparision_expression
46: comparision_expression (NE) ->  comparision_expression NE comparision_expression
47: arith_expression ('-') ->  '-' atomic_expr
48: arith_expression ('-') ->  '-' '(' comparision_expression ')'
49: arith_expression ('(') ->  '(' type_declaration ')' atomic_expr
50: arith_expression ('(') ->  '(' type_declaration ')' '(' comparision_expression ')'
51: arith_expression ('(') ->  '(' comparision_expression ')'
52: arith_expression ->  atomic_expr
53: arith_expression ('*') ->  arith_expression '*' arith_expression
54: arith_expression ('/') ->  arith_expression '/' arith_expression
55: arith_expression ('+') ->  arith_expression '+' arith_expression
56: arith_expression ('-') ->  arith_expression '-' arith_expression
57: atomic_expr ->  variable
58: atomic_expr ->  constant
59: atomic_expr ->  func_call
60: func_call (NAME) ->  NAME '(' pass_variable_list ')'
61: func_call (NAME) ->  NAME '(' ')'
62: pass_variable_list (',') ->  comparision_expression ',' pass_variable_list
63: pass_variable_list ->  comparision_expression
64: variable (NAME) ->  NAME
65: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
66: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
67: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BASIC_BLOCK
   259: FLOAT_NUMBER
   260: NAME
   261: RETURN
   262: INTEGER
   263: FLOAT
   264: DOUBLE
   265: VOID
   266: IF
   267: ELSE
   268: GOTO
   269: ASSIGN_OP
   270: NE
   271: EQ
   272: LT
   273: LE
   274: GT
   275: GE
    43: '+'
    45: '-'
    42: '*'
    47: '/'
   280: temp_proc
    59: ';'
    40: '('
    41: ')'
    44: ','
   123: '{'
   125: '}'
    58: ':'


Grammar States: 
State 0:
67: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_decls to state 3
  3:   On declaration_statement to state 4
  4:   On type_declaration to state 5
  5:   On INTEGER to state 6
  6:   On FLOAT to state 7
  7:   On DOUBLE to state 8
  8:   On VOID to state 9
  Reduce by 5: procedure_decls ->  . 


State 1:
67: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . #0001 procedure_decls procedure_list 
19: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0001 to state 10
  1:   On declaration_statement to state 11
  2:   On type_declaration to state 12
  3 (AUTO REMOVED by S/R resolution):   On INTEGER to state 6
  4 (AUTO REMOVED by S/R resolution):   On FLOAT to state 7
  5 (AUTO REMOVED by S/R resolution):   On DOUBLE to state 8
  6 (AUTO REMOVED by S/R resolution):   On VOID to state 9
  Reduce by 2: #0001 ->  . 


State 3:
3: program -> procedure_decls  . procedure_list 
  0:   On procedure_list to state 13
  1:   On procedure_name to state 14
  2:   On NAME to state 15
  Reduce by 9: procedure_list ->  . 


State 4:
18: declaration_statement_list -> declaration_statement  . 
  Reduce by 18: declaration_statement_list -> declaration_statement  . 


State 5:
4: procedure_decls -> type_declaration  . procedure_name ';' procedure_decls 
20: declaration_statement -> type_declaration  . NAME ';' 
  0:   On procedure_name to state 16
  1:   On NAME to state 17


State 6:
21: type_declaration -> INTEGER  . 
  Reduce by 21: type_declaration -> INTEGER  . 


State 7:
22: type_declaration -> FLOAT  . 
  Reduce by 22: type_declaration -> FLOAT  . 


State 8:
23: type_declaration -> DOUBLE  . 
  Reduce by 23: type_declaration -> DOUBLE  . 


State 9:
24: type_declaration -> VOID  . 
  Reduce by 24: type_declaration -> VOID  . 


State 10:
1: program -> declaration_statement_list #0001  . procedure_decls procedure_list 
  0:   On procedure_decls to state 18
  1:   On type_declaration to state 19
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  5:   On VOID to state 9
  Reduce by 5: procedure_decls ->  . 


State 11:
19: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 19: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 12:
20: declaration_statement -> type_declaration  . NAME ';' 
  0:   On NAME to state 20


State 13:
3: program -> procedure_decls procedure_list  . 
  Reduce by 3: program -> procedure_decls procedure_list  . 


State 14:
6: procedure_list -> procedure_name  . #0002 procedure_body #0003 procedure_list 
  0:   On #0002 to state 21
  Reduce by 7: #0002 ->  . 


State 15:
10: procedure_name -> NAME  . '(' argument_list ')' 
11: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 22


State 16:
4: procedure_decls -> type_declaration procedure_name  . ';' procedure_decls 
  0:   On ';' to state 23


State 17:
20: declaration_statement -> type_declaration NAME  . ';' 
10: procedure_name -> NAME  . '(' argument_list ')' 
11: procedure_name -> NAME  . '(' ')' 
  0:   On ';' to state 24
  1:   On '(' to state 22


State 18:
1: program -> declaration_statement_list #0001 procedure_decls  . procedure_list 
  0:   On procedure_list to state 25
  1:   On procedure_name to state 14
  2:   On NAME to state 15
  Reduce by 9: procedure_list ->  . 


State 19:
4: procedure_decls -> type_declaration  . procedure_name ';' procedure_decls 
  0:   On procedure_name to state 16
  1:   On NAME to state 15


State 20:
20: declaration_statement -> type_declaration NAME  . ';' 
  0:   On ';' to state 24


State 21:
6: procedure_list -> procedure_name #0002  . procedure_body #0003 procedure_list 
  0:   On procedure_body to state 26
  1:   On '{' to state 27


State 22:
10: procedure_name -> NAME '('  . argument_list ')' 
11: procedure_name -> NAME '('  . ')' 
  0:   On argument_list to state 28
  1:   On ')' to state 29
  2:   On argument to state 30
  3:   On type_declaration to state 31
  4:   On INTEGER to state 6
  5:   On FLOAT to state 7
  6:   On DOUBLE to state 8
  7:   On VOID to state 9


State 23:
4: procedure_decls -> type_declaration procedure_name ';'  . procedure_decls 
  0:   On procedure_decls to state 32
  1:   On type_declaration to state 19
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  5:   On VOID to state 9
  Reduce by 5: procedure_decls ->  . 


State 24:
20: declaration_statement -> type_declaration NAME ';'  . 
  Reduce by 20: declaration_statement -> type_declaration NAME ';'  . 


State 25:
1: program -> declaration_statement_list #0001 procedure_decls procedure_list  . 
  Reduce by 1: program -> declaration_statement_list #0001 procedure_decls procedure_list  . 


State 26:
6: procedure_list -> procedure_name #0002 procedure_body  . #0003 procedure_list 
  0:   On #0003 to state 33
  Reduce by 8: #0003 ->  . 


State 27:
15: procedure_body -> '{'  . declaration_statement_list #0004 basic_block_list '}' 
17: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 34
  1:   On basic_block_list to state 35
  2:   On declaration_statement to state 4
  3:   On basic_block to state 36
  4:   On type_declaration to state 12
  5:   On BASIC_BLOCK to state 37
  6:   On INTEGER to state 6
  7:   On FLOAT to state 7
  8:   On DOUBLE to state 8
  9:   On VOID to state 9


State 28:
10: procedure_name -> NAME '(' argument_list  . ')' 
12: argument_list -> argument_list  . ',' argument 
  0:   On ')' to state 38
  1:   On ',' to state 39


State 29:
11: procedure_name -> NAME '(' ')'  . 
  Reduce by 11: procedure_name -> NAME '(' ')'  . 


State 30:
13: argument_list -> argument  . 
  Reduce by 13: argument_list -> argument  . 


State 31:
14: argument -> type_declaration  . NAME 
  0:   On NAME to state 40


State 32:
4: procedure_decls -> type_declaration procedure_name ';' procedure_decls  . 
  Reduce by 4: procedure_decls -> type_declaration procedure_name ';' procedure_decls  . 


State 33:
6: procedure_list -> procedure_name #0002 procedure_body #0003  . procedure_list 
  0:   On procedure_list to state 41
  1:   On procedure_name to state 14
  2:   On NAME to state 15
  Reduce by 9: procedure_list ->  . 


State 34:
15: procedure_body -> '{' declaration_statement_list  . #0004 basic_block_list '}' 
19: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0004 to state 42
  1:   On declaration_statement to state 11
  2:   On type_declaration to state 12
  3:   On INTEGER to state 6
  4:   On FLOAT to state 7
  5:   On DOUBLE to state 8
  6:   On VOID to state 9
  Reduce by 16: #0004 ->  . 


State 35:
17: procedure_body -> '{' basic_block_list  . '}' 
25: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 43
  1:   On basic_block to state 44
  2:   On BASIC_BLOCK to state 37


State 36:
26: basic_block_list -> basic_block  . 
  Reduce by 26: basic_block_list -> basic_block  . 


State 37:
27: basic_block -> BASIC_BLOCK  . ':' executable_statement_list 
  0:   On ':' to state 45


State 38:
10: procedure_name -> NAME '(' argument_list ')'  . 
  Reduce by 10: procedure_name -> NAME '(' argument_list ')'  . 


State 39:
12: argument_list -> argument_list ','  . argument 
  0:   On argument to state 46
  1:   On type_declaration to state 31
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  5:   On VOID to state 9


State 40:
14: argument -> type_declaration NAME  . 
  Reduce by 14: argument -> type_declaration NAME  . 


State 41:
6: procedure_list -> procedure_name #0002 procedure_body #0003 procedure_list  . 
  Reduce by 6: procedure_list -> procedure_name #0002 procedure_body #0003 procedure_list  . 


State 42:
15: procedure_body -> '{' declaration_statement_list #0004  . basic_block_list '}' 
  0:   On basic_block_list to state 47
  1:   On basic_block to state 36
  2:   On BASIC_BLOCK to state 37


State 43:
17: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 17: procedure_body -> '{' basic_block_list '}'  . 


State 44:
25: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 25: basic_block_list -> basic_block_list basic_block  . 


State 45:
27: basic_block -> BASIC_BLOCK ':'  . executable_statement_list 
  0:   On executable_statement_list to state 48
  1:   On assignment_statement_list to state 49
  Reduce by 32: assignment_statement_list ->  . 


State 46:
12: argument_list -> argument_list ',' argument  . 
  Reduce by 12: argument_list -> argument_list ',' argument  . 


State 47:
15: procedure_body -> '{' declaration_statement_list #0004 basic_block_list  . '}' 
25: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 50
  1:   On basic_block to state 44
  2:   On BASIC_BLOCK to state 37


State 48:
27: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 
  Reduce by 27: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 


State 49:
28: executable_statement_list -> assignment_statement_list  . 
29: executable_statement_list -> assignment_statement_list  . RETURN return_value ';' 
33: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 51
  1:   On assignment_statement to state 52
  2:   On variable to state 53
  3:   On if_block to state 54
  4:   On goto_statement to state 55
  5:   On func_call to state 56
  6:   On NAME to state 57
  7:   On IF to state 58
  8:   On GOTO to state 59
  Reduce by 28: executable_statement_list -> assignment_statement_list  . 


State 50:
15: procedure_body -> '{' declaration_statement_list #0004 basic_block_list '}'  . 
  Reduce by 15: procedure_body -> '{' declaration_statement_list #0004 basic_block_list '}'  . 


State 51:
29: executable_statement_list -> assignment_statement_list RETURN  . return_value ';' 
  0:   On return_value to state 60
  1:   On comparision_expression to state 61
  2:   On arith_expression to state 62
  3:   On '-' to state 63
  4:   On '(' to state 64
  5:   On atomic_expr to state 65
  6:   On variable to state 66
  7:   On constant to state 67
  8:   On func_call to state 68
  9:   On NAME to state 57
  10:   On INTEGER_NUMBER to state 69
  11:   On FLOAT_NUMBER to state 70
  Reduce by 31: return_value ->  . 


State 52:
33: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 33: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 53:
34: assignment_statement -> variable  . ASSIGN_OP comparision_expression ';' 
  0:   On ASSIGN_OP to state 71


State 54:
35: assignment_statement -> if_block  . 
  Reduce by 35: assignment_statement -> if_block  . 


State 55:
36: assignment_statement -> goto_statement  . 
  Reduce by 36: assignment_statement -> goto_statement  . 


State 56:
37: assignment_statement -> func_call  . ';' 
  0:   On ';' to state 72


State 57:
64: variable -> NAME  . 
60: func_call -> NAME  . '(' pass_variable_list ')' 
61: func_call -> NAME  . '(' ')' 
  0:   On '(' to state 73
  Reduce by 64: variable -> NAME  . 


State 58:
38: if_block -> IF  . '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On '(' to state 74


State 59:
39: goto_statement -> GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 75


State 60:
29: executable_statement_list -> assignment_statement_list RETURN return_value  . ';' 
  0:   On ';' to state 76


State 61:
30: return_value -> comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On GT to state 77
  1:   On LT to state 78
  2:   On GE to state 79
  3:   On LE to state 80
  4:   On EQ to state 81
  5:   On NE to state 82
  Reduce by 30: return_value -> comparision_expression  . 


State 62:
40: comparision_expression -> arith_expression  . 
53: arith_expression -> arith_expression  . '*' arith_expression 
54: arith_expression -> arith_expression  . '/' arith_expression 
55: arith_expression -> arith_expression  . '+' arith_expression 
56: arith_expression -> arith_expression  . '-' arith_expression 
  0:   On '*' to state 83
  1:   On '/' to state 84
  2:   On '+' to state 85
  3:   On '-' to state 86
  Reduce by 40: comparision_expression -> arith_expression  . 


State 63:
47: arith_expression -> '-'  . atomic_expr 
48: arith_expression -> '-'  . '(' comparision_expression ')' 
  0:   On atomic_expr to state 87
  1:   On '(' to state 88
  2:   On variable to state 66
  3:   On constant to state 67
  4:   On func_call to state 68
  5:   On NAME to state 57
  6:   On INTEGER_NUMBER to state 69
  7:   On FLOAT_NUMBER to state 70


State 64:
49: arith_expression -> '('  . type_declaration ')' atomic_expr 
50: arith_expression -> '('  . type_declaration ')' '(' comparision_expression ')' 
51: arith_expression -> '('  . comparision_expression ')' 
  0:   On type_declaration to state 89
  1:   On comparision_expression to state 90
  2:   On INTEGER to state 6
  3:   On FLOAT to state 7
  4:   On DOUBLE to state 8
  5:   On VOID to state 9
  6:   On arith_expression to state 62
  7:   On '-' to state 63
  8:   On '(' to state 64
  9:   On atomic_expr to state 65
  10:   On variable to state 66
  11:   On constant to state 67
  12:   On func_call to state 68
  13:   On NAME to state 57
  14:   On INTEGER_NUMBER to state 69
  15:   On FLOAT_NUMBER to state 70


State 65:
52: arith_expression -> atomic_expr  . 
  Reduce by 52: arith_expression -> atomic_expr  . 


State 66:
57: atomic_expr -> variable  . 
  Reduce by 57: atomic_expr -> variable  . 


State 67:
58: atomic_expr -> constant  . 
  Reduce by 58: atomic_expr -> constant  . 


State 68:
59: atomic_expr -> func_call  . 
  Reduce by 59: atomic_expr -> func_call  . 


State 69:
65: constant -> INTEGER_NUMBER  . 
  Reduce by 65: constant -> INTEGER_NUMBER  . 


State 70:
66: constant -> FLOAT_NUMBER  . 
  Reduce by 66: constant -> FLOAT_NUMBER  . 


State 71:
34: assignment_statement -> variable ASSIGN_OP  . comparision_expression ';' 
  0:   On comparision_expression to state 91
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 72:
37: assignment_statement -> func_call ';'  . 
  Reduce by 37: assignment_statement -> func_call ';'  . 


State 73:
60: func_call -> NAME '('  . pass_variable_list ')' 
61: func_call -> NAME '('  . ')' 
  0:   On pass_variable_list to state 92
  1:   On ')' to state 93
  2:   On comparision_expression to state 94
  3:   On arith_expression to state 62
  4:   On '-' to state 63
  5:   On '(' to state 64
  6:   On atomic_expr to state 65
  7:   On variable to state 66
  8:   On constant to state 67
  9:   On func_call to state 68
  10:   On NAME to state 57
  11:   On INTEGER_NUMBER to state 69
  12:   On FLOAT_NUMBER to state 70


State 74:
38: if_block -> IF '('  . comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On comparision_expression to state 95
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 75:
39: goto_statement -> GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 96


State 76:
29: executable_statement_list -> assignment_statement_list RETURN return_value ';'  . 
  Reduce by 29: executable_statement_list -> assignment_statement_list RETURN return_value ';'  . 


State 77:
41: comparision_expression -> comparision_expression GT  . comparision_expression 
  0:   On comparision_expression to state 97
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 78:
42: comparision_expression -> comparision_expression LT  . comparision_expression 
  0:   On comparision_expression to state 98
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 79:
43: comparision_expression -> comparision_expression GE  . comparision_expression 
  0:   On comparision_expression to state 99
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 80:
44: comparision_expression -> comparision_expression LE  . comparision_expression 
  0:   On comparision_expression to state 100
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 81:
45: comparision_expression -> comparision_expression EQ  . comparision_expression 
  0:   On comparision_expression to state 101
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 82:
46: comparision_expression -> comparision_expression NE  . comparision_expression 
  0:   On comparision_expression to state 102
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 83:
53: arith_expression -> arith_expression '*'  . arith_expression 
  0:   On arith_expression to state 103
  1:   On '-' to state 63
  2:   On '(' to state 64
  3:   On atomic_expr to state 65
  4:   On variable to state 66
  5:   On constant to state 67
  6:   On func_call to state 68
  7:   On NAME to state 57
  8:   On INTEGER_NUMBER to state 69
  9:   On FLOAT_NUMBER to state 70


State 84:
54: arith_expression -> arith_expression '/'  . arith_expression 
  0:   On arith_expression to state 104
  1:   On '-' to state 63
  2:   On '(' to state 64
  3:   On atomic_expr to state 65
  4:   On variable to state 66
  5:   On constant to state 67
  6:   On func_call to state 68
  7:   On NAME to state 57
  8:   On INTEGER_NUMBER to state 69
  9:   On FLOAT_NUMBER to state 70


State 85:
55: arith_expression -> arith_expression '+'  . arith_expression 
  0:   On arith_expression to state 105
  1:   On '-' to state 63
  2:   On '(' to state 64
  3:   On atomic_expr to state 65
  4:   On variable to state 66
  5:   On constant to state 67
  6:   On func_call to state 68
  7:   On NAME to state 57
  8:   On INTEGER_NUMBER to state 69
  9:   On FLOAT_NUMBER to state 70


State 86:
56: arith_expression -> arith_expression '-'  . arith_expression 
  0:   On arith_expression to state 106
  1:   On '-' to state 63
  2:   On '(' to state 64
  3:   On atomic_expr to state 65
  4:   On variable to state 66
  5:   On constant to state 67
  6:   On func_call to state 68
  7:   On NAME to state 57
  8:   On INTEGER_NUMBER to state 69
  9:   On FLOAT_NUMBER to state 70


State 87:
47: arith_expression -> '-' atomic_expr  . 
  Reduce by 47: arith_expression -> '-' atomic_expr  . 


State 88:
48: arith_expression -> '-' '('  . comparision_expression ')' 
  0:   On comparision_expression to state 107
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 89:
49: arith_expression -> '(' type_declaration  . ')' atomic_expr 
50: arith_expression -> '(' type_declaration  . ')' '(' comparision_expression ')' 
  0:   On ')' to state 108


State 90:
51: arith_expression -> '(' comparision_expression  . ')' 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 109
  1:   On GT to state 77
  2:   On LT to state 78
  3:   On GE to state 79
  4:   On LE to state 80
  5:   On EQ to state 81
  6:   On NE to state 82


State 91:
34: assignment_statement -> variable ASSIGN_OP comparision_expression  . ';' 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ';' to state 110
  1:   On GT to state 77
  2:   On LT to state 78
  3:   On GE to state 79
  4:   On LE to state 80
  5:   On EQ to state 81
  6:   On NE to state 82


State 92:
60: func_call -> NAME '(' pass_variable_list  . ')' 
  0:   On ')' to state 111


State 93:
61: func_call -> NAME '(' ')'  . 
  Reduce by 61: func_call -> NAME '(' ')'  . 


State 94:
62: pass_variable_list -> comparision_expression  . ',' pass_variable_list 
63: pass_variable_list -> comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ',' to state 112
  1:   On GT to state 77
  2:   On LT to state 78
  3:   On GE to state 79
  4:   On LE to state 80
  5:   On EQ to state 81
  6:   On NE to state 82
  Reduce by 63: pass_variable_list -> comparision_expression  . 


State 95:
38: if_block -> IF '(' comparision_expression  . ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 113
  1:   On GT to state 77
  2:   On LT to state 78
  3:   On GE to state 79
  4:   On LE to state 80
  5:   On EQ to state 81
  6:   On NE to state 82


State 96:
39: goto_statement -> GOTO BASIC_BLOCK ';'  . 
  Reduce by 39: goto_statement -> GOTO BASIC_BLOCK ';'  . 


State 97:
41: comparision_expression -> comparision_expression GT comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 77
  1 (removed by precedence):   On LT to state 78
  2 (removed by precedence):   On GE to state 79
  3 (removed by precedence):   On LE to state 80
  4 (removed by precedence):   On EQ to state 81
  5 (removed by precedence):   On NE to state 82
  Reduce by 41: comparision_expression -> comparision_expression GT comparision_expression  . 


State 98:
42: comparision_expression -> comparision_expression LT comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 77
  1 (removed by precedence):   On LT to state 78
  2 (removed by precedence):   On GE to state 79
  3 (removed by precedence):   On LE to state 80
  4 (removed by precedence):   On EQ to state 81
  5 (removed by precedence):   On NE to state 82
  Reduce by 42: comparision_expression -> comparision_expression LT comparision_expression  . 


State 99:
43: comparision_expression -> comparision_expression GE comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 77
  1 (removed by precedence):   On LT to state 78
  2 (removed by precedence):   On GE to state 79
  3 (removed by precedence):   On LE to state 80
  4 (removed by precedence):   On EQ to state 81
  5 (removed by precedence):   On NE to state 82
  Reduce by 43: comparision_expression -> comparision_expression GE comparision_expression  . 


State 100:
44: comparision_expression -> comparision_expression LE comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 77
  1 (removed by precedence):   On LT to state 78
  2 (removed by precedence):   On GE to state 79
  3 (removed by precedence):   On LE to state 80
  4 (removed by precedence):   On EQ to state 81
  5 (removed by precedence):   On NE to state 82
  Reduce by 44: comparision_expression -> comparision_expression LE comparision_expression  . 


State 101:
45: comparision_expression -> comparision_expression EQ comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On GT to state 77
  1:   On LT to state 78
  2:   On GE to state 79
  3:   On LE to state 80
  4 (removed by precedence):   On EQ to state 81
  5 (removed by precedence):   On NE to state 82
  Reduce by 45: comparision_expression -> comparision_expression EQ comparision_expression  . 


State 102:
46: comparision_expression -> comparision_expression NE comparision_expression  . 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On GT to state 77
  1:   On LT to state 78
  2:   On GE to state 79
  3:   On LE to state 80
  4 (removed by precedence):   On EQ to state 81
  5 (removed by precedence):   On NE to state 82
  Reduce by 46: comparision_expression -> comparision_expression NE comparision_expression  . 


State 103:
53: arith_expression -> arith_expression '*' arith_expression  . 
53: arith_expression -> arith_expression  . '*' arith_expression 
54: arith_expression -> arith_expression  . '/' arith_expression 
55: arith_expression -> arith_expression  . '+' arith_expression 
56: arith_expression -> arith_expression  . '-' arith_expression 
  0 (removed by precedence):   On '*' to state 83
  1 (removed by precedence):   On '/' to state 84
  2 (removed by precedence):   On '+' to state 85
  3 (removed by precedence):   On '-' to state 86
  Reduce by 53: arith_expression -> arith_expression '*' arith_expression  . 


State 104:
54: arith_expression -> arith_expression '/' arith_expression  . 
53: arith_expression -> arith_expression  . '*' arith_expression 
54: arith_expression -> arith_expression  . '/' arith_expression 
55: arith_expression -> arith_expression  . '+' arith_expression 
56: arith_expression -> arith_expression  . '-' arith_expression 
  0 (removed by precedence):   On '*' to state 83
  1 (removed by precedence):   On '/' to state 84
  2 (removed by precedence):   On '+' to state 85
  3 (removed by precedence):   On '-' to state 86
  Reduce by 54: arith_expression -> arith_expression '/' arith_expression  . 


State 105:
55: arith_expression -> arith_expression '+' arith_expression  . 
53: arith_expression -> arith_expression  . '*' arith_expression 
54: arith_expression -> arith_expression  . '/' arith_expression 
55: arith_expression -> arith_expression  . '+' arith_expression 
56: arith_expression -> arith_expression  . '-' arith_expression 
  0:   On '*' to state 83
  1:   On '/' to state 84
  2 (removed by precedence):   On '+' to state 85
  3 (removed by precedence):   On '-' to state 86
  Reduce by 55: arith_expression -> arith_expression '+' arith_expression  . 


State 106:
56: arith_expression -> arith_expression '-' arith_expression  . 
53: arith_expression -> arith_expression  . '*' arith_expression 
54: arith_expression -> arith_expression  . '/' arith_expression 
55: arith_expression -> arith_expression  . '+' arith_expression 
56: arith_expression -> arith_expression  . '-' arith_expression 
  0:   On '*' to state 83
  1:   On '/' to state 84
  2 (removed by precedence):   On '+' to state 85
  3 (removed by precedence):   On '-' to state 86
  Reduce by 56: arith_expression -> arith_expression '-' arith_expression  . 


State 107:
48: arith_expression -> '-' '(' comparision_expression  . ')' 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 114
  1:   On GT to state 77
  2:   On LT to state 78
  3:   On GE to state 79
  4:   On LE to state 80
  5:   On EQ to state 81
  6:   On NE to state 82


State 108:
49: arith_expression -> '(' type_declaration ')'  . atomic_expr 
50: arith_expression -> '(' type_declaration ')'  . '(' comparision_expression ')' 
  0:   On atomic_expr to state 115
  1:   On '(' to state 116
  2:   On variable to state 66
  3:   On constant to state 67
  4:   On func_call to state 68
  5:   On NAME to state 57
  6:   On INTEGER_NUMBER to state 69
  7:   On FLOAT_NUMBER to state 70


State 109:
51: arith_expression -> '(' comparision_expression ')'  . 
  Reduce by 51: arith_expression -> '(' comparision_expression ')'  . 


State 110:
34: assignment_statement -> variable ASSIGN_OP comparision_expression ';'  . 
  Reduce by 34: assignment_statement -> variable ASSIGN_OP comparision_expression ';'  . 


State 111:
60: func_call -> NAME '(' pass_variable_list ')'  . 
  Reduce by 60: func_call -> NAME '(' pass_variable_list ')'  . 


State 112:
62: pass_variable_list -> comparision_expression ','  . pass_variable_list 
  0:   On pass_variable_list to state 117
  1:   On comparision_expression to state 94
  2:   On arith_expression to state 62
  3:   On '-' to state 63
  4:   On '(' to state 64
  5:   On atomic_expr to state 65
  6:   On variable to state 66
  7:   On constant to state 67
  8:   On func_call to state 68
  9:   On NAME to state 57
  10:   On INTEGER_NUMBER to state 69
  11:   On FLOAT_NUMBER to state 70


State 113:
38: if_block -> IF '(' comparision_expression ')'  . GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 118


State 114:
48: arith_expression -> '-' '(' comparision_expression ')'  . 
  Reduce by 48: arith_expression -> '-' '(' comparision_expression ')'  . 


State 115:
49: arith_expression -> '(' type_declaration ')' atomic_expr  . 
  Reduce by 49: arith_expression -> '(' type_declaration ')' atomic_expr  . 


State 116:
50: arith_expression -> '(' type_declaration ')' '('  . comparision_expression ')' 
  0:   On comparision_expression to state 119
  1:   On arith_expression to state 62
  2:   On '-' to state 63
  3:   On '(' to state 64
  4:   On atomic_expr to state 65
  5:   On variable to state 66
  6:   On constant to state 67
  7:   On func_call to state 68
  8:   On NAME to state 57
  9:   On INTEGER_NUMBER to state 69
  10:   On FLOAT_NUMBER to state 70


State 117:
62: pass_variable_list -> comparision_expression ',' pass_variable_list  . 
  Reduce by 62: pass_variable_list -> comparision_expression ',' pass_variable_list  . 


State 118:
38: if_block -> IF '(' comparision_expression ')' GOTO  . BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 120


State 119:
50: arith_expression -> '(' type_declaration ')' '(' comparision_expression  . ')' 
41: comparision_expression -> comparision_expression  . GT comparision_expression 
42: comparision_expression -> comparision_expression  . LT comparision_expression 
43: comparision_expression -> comparision_expression  . GE comparision_expression 
44: comparision_expression -> comparision_expression  . LE comparision_expression 
45: comparision_expression -> comparision_expression  . EQ comparision_expression 
46: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 121
  1:   On GT to state 77
  2:   On LT to state 78
  3:   On GE to state 79
  4:   On LE to state 80
  5:   On EQ to state 81
  6:   On NE to state 82


State 120:
38: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK  . ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On ';' to state 122


State 121:
50: arith_expression -> '(' type_declaration ')' '(' comparision_expression ')'  . 
  Reduce by 50: arith_expression -> '(' type_declaration ')' '(' comparision_expression ')'  . 


State 122:
38: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';'  . ELSE GOTO BASIC_BLOCK ';' 
  0:   On ELSE to state 123


State 123:
38: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE  . GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 124


State 124:
38: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 125


State 125:
38: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 126


State 126:
38: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 
  Reduce by 38: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 



