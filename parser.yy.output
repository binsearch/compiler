
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  declaration_statement_list procedure_name #0001 procedure_body
2: #0001 ->  <empty>
3: program ->  procedure_name #0002 procedure_body
4: #0002 ->  <empty>
5: procedure_name (NAME) ->  NAME '(' ')'
6: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
7: #0003 ->  <empty>
8: procedure_body ('{') ->  '{' basic_block_list '}'
9: declaration_statement_list ->  declaration_statement
10: declaration_statement_list ->  declaration_statement_list declaration_statement
11: declaration_statement (INTEGER) ->  INTEGER NAME ';'
12: basic_block_list ->  basic_block_list basic_block
13: basic_block_list ->  basic_block
14: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list
15: executable_statement_list ->  assignment_statement_list
16: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
17: assignment_statement_list ->  <empty>
18: assignment_statement_list ->  assignment_statement_list assignment_statement
19: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP comparision_expression ';'
20: assignment_statement ->  if_block
21: assignment_statement ->  goto_statement
22: if_block (IF) ->  IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'
23: goto_statement (GOTO) ->  GOTO BASIC_BLOCK ';'
24: comparision_expression ->  arith_expression
25: comparision_expression (GT) ->  comparision_expression GT comparision_expression
26: comparision_expression (LT) ->  comparision_expression LT comparision_expression
27: comparision_expression (GE) ->  comparision_expression GE comparision_expression
28: comparision_expression (LE) ->  comparision_expression LE comparision_expression
29: comparision_expression (EQ) ->  comparision_expression EQ comparision_expression
30: comparision_expression (NE) ->  comparision_expression NE comparision_expression
31: arith_expression ->  variable
32: arith_expression ->  constant
33: arith_expression ('+') ->  arith_expression '+' arith_expression
34: arith_expression ('-') ->  arith_expression '-' arith_expression
35: arith_expression ('*') ->  arith_expression '*' arith_expression
36: arith_expression ('/') ->  arith_expression '/' arith_expression
37: variable (NAME) ->  NAME
38: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
39: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: NE
   258: EQ
   259: GE
   260: GT
   261: LE
   262: LT
   263: INTEGER_NUMBER
   264: BASIC_BLOCK
   265: NAME
   266: RETURN
   267: INTEGER
   268: IF
   269: ELSE
   270: GOTO
   271: ASSIGN_OP
    43: '+'
    45: '-'
    42: '*'
    47: '/'
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    58: ':'


Grammar States: 
State 0:
39: program_$ ->  . program 
  0:   On program to state 1
  1:   On declaration_statement_list to state 2
  2:   On procedure_name to state 3
  3:   On declaration_statement to state 4
  4:   On NAME to state 5
  5:   On INTEGER to state 6


State 1:
39: program_$ -> program  . 


State 2:
1: program -> declaration_statement_list  . procedure_name #0001 procedure_body 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 7
  1:   On declaration_statement to state 8
  2:   On NAME to state 5
  3:   On INTEGER to state 6


State 3:
3: program -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 9
  Reduce by 4: #0002 ->  . 


State 4:
9: declaration_statement_list -> declaration_statement  . 
  Reduce by 9: declaration_statement_list -> declaration_statement  . 


State 5:
5: procedure_name -> NAME  . '(' ')' 
  0:   On '(' to state 10


State 6:
11: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 11


State 7:
1: program -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 12
  Reduce by 2: #0001 ->  . 


State 8:
10: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 10: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 9:
3: program -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 13
  1:   On '{' to state 14


State 10:
5: procedure_name -> NAME '('  . ')' 
  0:   On ')' to state 15


State 11:
11: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 16


State 12:
1: program -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 17
  1:   On '{' to state 14


State 13:
3: program -> procedure_name #0002 procedure_body  . 
  Reduce by 3: program -> procedure_name #0002 procedure_body  . 


State 14:
6: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
8: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 18
  1:   On basic_block_list to state 19
  2:   On declaration_statement to state 4
  3:   On basic_block to state 20
  4:   On INTEGER to state 6
  5:   On BASIC_BLOCK to state 21


State 15:
5: procedure_name -> NAME '(' ')'  . 
  Reduce by 5: procedure_name -> NAME '(' ')'  . 


State 16:
11: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 11: declaration_statement -> INTEGER NAME ';'  . 


State 17:
1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 1: program -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 18:
6: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
10: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 22
  1:   On declaration_statement to state 8
  2:   On INTEGER to state 6
  Reduce by 7: #0003 ->  . 


State 19:
8: procedure_body -> '{' basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 23
  1:   On basic_block to state 24
  2:   On BASIC_BLOCK to state 21


State 20:
13: basic_block_list -> basic_block  . 
  Reduce by 13: basic_block_list -> basic_block  . 


State 21:
14: basic_block -> BASIC_BLOCK  . ':' executable_statement_list 
  0:   On ':' to state 25


State 22:
6: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 26
  1:   On basic_block to state 20
  2:   On BASIC_BLOCK to state 21


State 23:
8: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 8: procedure_body -> '{' basic_block_list '}'  . 


State 24:
12: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 12: basic_block_list -> basic_block_list basic_block  . 


State 25:
14: basic_block -> BASIC_BLOCK ':'  . executable_statement_list 
  0:   On executable_statement_list to state 27
  1:   On assignment_statement_list to state 28
  Reduce by 17: assignment_statement_list ->  . 


State 26:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
12: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 29
  1:   On basic_block to state 24
  2:   On BASIC_BLOCK to state 21


State 27:
14: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 
  Reduce by 14: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 


State 28:
15: executable_statement_list -> assignment_statement_list  . 
16: executable_statement_list -> assignment_statement_list  . RETURN ';' 
18: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 30
  1:   On assignment_statement to state 31
  2:   On variable to state 32
  3:   On if_block to state 33
  4:   On goto_statement to state 34
  5:   On NAME to state 35
  6:   On IF to state 36
  7:   On GOTO to state 37
  Reduce by 15: executable_statement_list -> assignment_statement_list  . 


State 29:
6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 6: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 30:
16: executable_statement_list -> assignment_statement_list RETURN  . ';' 
  0:   On ';' to state 38


State 31:
18: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 18: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 32:
19: assignment_statement -> variable  . ASSIGN_OP comparision_expression ';' 
  0:   On ASSIGN_OP to state 39


State 33:
20: assignment_statement -> if_block  . 
  Reduce by 20: assignment_statement -> if_block  . 


State 34:
21: assignment_statement -> goto_statement  . 
  Reduce by 21: assignment_statement -> goto_statement  . 


State 35:
37: variable -> NAME  . 
  Reduce by 37: variable -> NAME  . 


State 36:
22: if_block -> IF  . '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On '(' to state 40


State 37:
23: goto_statement -> GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 41


State 38:
16: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 16: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 39:
19: assignment_statement -> variable ASSIGN_OP  . comparision_expression ';' 
  0:   On comparision_expression to state 42
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 40:
22: if_block -> IF '('  . comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On comparision_expression to state 47
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 41:
23: goto_statement -> GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 48


State 42:
19: assignment_statement -> variable ASSIGN_OP comparision_expression  . ';' 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ';' to state 49
  1:   On GT to state 50
  2:   On LT to state 51
  3:   On GE to state 52
  4:   On LE to state 53
  5:   On EQ to state 54
  6:   On NE to state 55


State 43:
24: comparision_expression -> arith_expression  . 
33: arith_expression -> arith_expression  . '+' arith_expression 
34: arith_expression -> arith_expression  . '-' arith_expression 
35: arith_expression -> arith_expression  . '*' arith_expression 
36: arith_expression -> arith_expression  . '/' arith_expression 
  0:   On '+' to state 56
  1:   On '-' to state 57
  2:   On '*' to state 58
  3:   On '/' to state 59
  Reduce by 24: comparision_expression -> arith_expression  . 


State 44:
31: arith_expression -> variable  . 
  Reduce by 31: arith_expression -> variable  . 


State 45:
32: arith_expression -> constant  . 
  Reduce by 32: arith_expression -> constant  . 


State 46:
38: constant -> INTEGER_NUMBER  . 
  Reduce by 38: constant -> INTEGER_NUMBER  . 


State 47:
22: if_block -> IF '(' comparision_expression  . ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On ')' to state 60
  1:   On GT to state 50
  2:   On LT to state 51
  3:   On GE to state 52
  4:   On LE to state 53
  5:   On EQ to state 54
  6:   On NE to state 55


State 48:
23: goto_statement -> GOTO BASIC_BLOCK ';'  . 
  Reduce by 23: goto_statement -> GOTO BASIC_BLOCK ';'  . 


State 49:
19: assignment_statement -> variable ASSIGN_OP comparision_expression ';'  . 
  Reduce by 19: assignment_statement -> variable ASSIGN_OP comparision_expression ';'  . 


State 50:
25: comparision_expression -> comparision_expression GT  . comparision_expression 
  0:   On comparision_expression to state 61
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 51:
26: comparision_expression -> comparision_expression LT  . comparision_expression 
  0:   On comparision_expression to state 62
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 52:
27: comparision_expression -> comparision_expression GE  . comparision_expression 
  0:   On comparision_expression to state 63
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 53:
28: comparision_expression -> comparision_expression LE  . comparision_expression 
  0:   On comparision_expression to state 64
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 54:
29: comparision_expression -> comparision_expression EQ  . comparision_expression 
  0:   On comparision_expression to state 65
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 55:
30: comparision_expression -> comparision_expression NE  . comparision_expression 
  0:   On comparision_expression to state 66
  1:   On arith_expression to state 43
  2:   On variable to state 44
  3:   On constant to state 45
  4:   On NAME to state 35
  5:   On INTEGER_NUMBER to state 46


State 56:
33: arith_expression -> arith_expression '+'  . arith_expression 
  0:   On arith_expression to state 67
  1:   On variable to state 44
  2:   On constant to state 45
  3:   On NAME to state 35
  4:   On INTEGER_NUMBER to state 46


State 57:
34: arith_expression -> arith_expression '-'  . arith_expression 
  0:   On arith_expression to state 68
  1:   On variable to state 44
  2:   On constant to state 45
  3:   On NAME to state 35
  4:   On INTEGER_NUMBER to state 46


State 58:
35: arith_expression -> arith_expression '*'  . arith_expression 
  0:   On arith_expression to state 69
  1:   On variable to state 44
  2:   On constant to state 45
  3:   On NAME to state 35
  4:   On INTEGER_NUMBER to state 46


State 59:
36: arith_expression -> arith_expression '/'  . arith_expression 
  0:   On arith_expression to state 70
  1:   On variable to state 44
  2:   On constant to state 45
  3:   On NAME to state 35
  4:   On INTEGER_NUMBER to state 46


State 60:
22: if_block -> IF '(' comparision_expression ')'  . GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 71


State 61:
25: comparision_expression -> comparision_expression GT comparision_expression  . 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 50
  1 (removed by precedence):   On LT to state 51
  2 (removed by precedence):   On GE to state 52
  3 (removed by precedence):   On LE to state 53
  4 (removed by precedence):   On EQ to state 54
  5 (removed by precedence):   On NE to state 55
  Reduce by 25: comparision_expression -> comparision_expression GT comparision_expression  . 


State 62:
26: comparision_expression -> comparision_expression LT comparision_expression  . 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 50
  1 (removed by precedence):   On LT to state 51
  2 (removed by precedence):   On GE to state 52
  3 (removed by precedence):   On LE to state 53
  4 (removed by precedence):   On EQ to state 54
  5 (removed by precedence):   On NE to state 55
  Reduce by 26: comparision_expression -> comparision_expression LT comparision_expression  . 


State 63:
27: comparision_expression -> comparision_expression GE comparision_expression  . 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 50
  1 (removed by precedence):   On LT to state 51
  2 (removed by precedence):   On GE to state 52
  3 (removed by precedence):   On LE to state 53
  4 (removed by precedence):   On EQ to state 54
  5 (removed by precedence):   On NE to state 55
  Reduce by 27: comparision_expression -> comparision_expression GE comparision_expression  . 


State 64:
28: comparision_expression -> comparision_expression LE comparision_expression  . 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0 (removed by precedence):   On GT to state 50
  1 (removed by precedence):   On LT to state 51
  2 (removed by precedence):   On GE to state 52
  3 (removed by precedence):   On LE to state 53
  4 (removed by precedence):   On EQ to state 54
  5 (removed by precedence):   On NE to state 55
  Reduce by 28: comparision_expression -> comparision_expression LE comparision_expression  . 


State 65:
29: comparision_expression -> comparision_expression EQ comparision_expression  . 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On GT to state 50
  1:   On LT to state 51
  2:   On GE to state 52
  3:   On LE to state 53
  4 (removed by precedence):   On EQ to state 54
  5 (removed by precedence):   On NE to state 55
  Reduce by 29: comparision_expression -> comparision_expression EQ comparision_expression  . 


State 66:
30: comparision_expression -> comparision_expression NE comparision_expression  . 
25: comparision_expression -> comparision_expression  . GT comparision_expression 
26: comparision_expression -> comparision_expression  . LT comparision_expression 
27: comparision_expression -> comparision_expression  . GE comparision_expression 
28: comparision_expression -> comparision_expression  . LE comparision_expression 
29: comparision_expression -> comparision_expression  . EQ comparision_expression 
30: comparision_expression -> comparision_expression  . NE comparision_expression 
  0:   On GT to state 50
  1:   On LT to state 51
  2:   On GE to state 52
  3:   On LE to state 53
  4 (removed by precedence):   On EQ to state 54
  5 (removed by precedence):   On NE to state 55
  Reduce by 30: comparision_expression -> comparision_expression NE comparision_expression  . 


State 67:
33: arith_expression -> arith_expression '+' arith_expression  . 
33: arith_expression -> arith_expression  . '+' arith_expression 
34: arith_expression -> arith_expression  . '-' arith_expression 
35: arith_expression -> arith_expression  . '*' arith_expression 
36: arith_expression -> arith_expression  . '/' arith_expression 
  0 (removed by precedence):   On '+' to state 56
  1 (removed by precedence):   On '-' to state 57
  2:   On '*' to state 58
  3:   On '/' to state 59
  Reduce by 33: arith_expression -> arith_expression '+' arith_expression  . 


State 68:
34: arith_expression -> arith_expression '-' arith_expression  . 
33: arith_expression -> arith_expression  . '+' arith_expression 
34: arith_expression -> arith_expression  . '-' arith_expression 
35: arith_expression -> arith_expression  . '*' arith_expression 
36: arith_expression -> arith_expression  . '/' arith_expression 
  0 (removed by precedence):   On '+' to state 56
  1 (removed by precedence):   On '-' to state 57
  2:   On '*' to state 58
  3:   On '/' to state 59
  Reduce by 34: arith_expression -> arith_expression '-' arith_expression  . 


State 69:
35: arith_expression -> arith_expression '*' arith_expression  . 
33: arith_expression -> arith_expression  . '+' arith_expression 
34: arith_expression -> arith_expression  . '-' arith_expression 
35: arith_expression -> arith_expression  . '*' arith_expression 
36: arith_expression -> arith_expression  . '/' arith_expression 
  0 (removed by precedence):   On '+' to state 56
  1 (removed by precedence):   On '-' to state 57
  2 (removed by precedence):   On '*' to state 58
  3 (removed by precedence):   On '/' to state 59
  Reduce by 35: arith_expression -> arith_expression '*' arith_expression  . 


State 70:
36: arith_expression -> arith_expression '/' arith_expression  . 
33: arith_expression -> arith_expression  . '+' arith_expression 
34: arith_expression -> arith_expression  . '-' arith_expression 
35: arith_expression -> arith_expression  . '*' arith_expression 
36: arith_expression -> arith_expression  . '/' arith_expression 
  0 (removed by precedence):   On '+' to state 56
  1 (removed by precedence):   On '-' to state 57
  2 (removed by precedence):   On '*' to state 58
  3 (removed by precedence):   On '/' to state 59
  Reduce by 36: arith_expression -> arith_expression '/' arith_expression  . 


State 71:
22: if_block -> IF '(' comparision_expression ')' GOTO  . BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 72


State 72:
22: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK  . ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On ';' to state 73


State 73:
22: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';'  . ELSE GOTO BASIC_BLOCK ';' 
  0:   On ELSE to state 74


State 74:
22: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE  . GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 75


State 75:
22: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 76


State 76:
22: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 77


State 77:
22: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 
  Reduce by 22: if_block -> IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 



