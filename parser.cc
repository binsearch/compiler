// Generated by Bisonc++ V2.09.03 on Wed, 12 Mar 2014 21:28:54 +0530

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {296, 4}, // 1: program ->  declaration_statement_list procedure_decls #0001 procedure_list
     {299, 0}, // 2: #0001 ->  <empty>
     {296, 2}, // 3: program ->  procedure_decls procedure_list
     {298, 5}, // 4: procedure_list ->  procedure_name #0002 procedure_body #0003 procedure_list
     {302, 0}, // 5: #0002 ->  <empty>
     {303, 0}, // 6: #0003 ->  <empty>
     {298, 0}, // 7: procedure_list ->  <empty>
     {297, 8}, // 8: procedure_decls (NAME) ->  type_declaration NAME '(' argument_list ')' ';' #0004 procedure_decls
     {304, 0}, // 9: #0004 ->  <empty>
     {297, 7}, // 10: procedure_decls (NAME) ->  type_declaration NAME '(' ')' ';' #0005 procedure_decls
     {305, 0}, // 11: #0005 ->  <empty>
     {297, 0}, // 12: procedure_decls ->  <empty>
     {300, 4}, // 13: procedure_name (NAME) ->  NAME '(' argument_list ')'
     {300, 3}, // 14: procedure_name (NAME) ->  NAME '(' ')'
     {306, 3}, // 15: argument_list (',') ->  argument_list ',' argument
     {306, 1}, // 16: argument_list ->  argument
     {307, 2}, // 17: argument (NAME) ->  type_declaration NAME
     {301, 5}, // 18: procedure_body ('{') ->  '{' declaration_statement_list #0006 basic_block_list '}'
     {308, 0}, // 19: #0006 ->  <empty>
     {301, 3}, // 20: procedure_body ('{') ->  '{' basic_block_list '}'
     {309, 1}, // 21: declaration_statement_list ->  declaration_statement
     {309, 2}, // 22: declaration_statement_list ->  declaration_statement_list declaration_statement
     {310, 3}, // 23: declaration_statement (NAME) ->  type_declaration NAME ';'
     {311, 1}, // 24: type_declaration (INTEGER) ->  INTEGER
     {311, 1}, // 25: type_declaration (FLOAT) ->  FLOAT
     {311, 1}, // 26: type_declaration (DOUBLE) ->  DOUBLE
     {311, 1}, // 27: type_declaration (VOID) ->  VOID
     {312, 2}, // 28: basic_block_list ->  basic_block_list basic_block
     {312, 1}, // 29: basic_block_list ->  basic_block
     {313, 3}, // 30: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list
     {314, 1}, // 31: executable_statement_list ->  assignment_statement_list
     {314, 4}, // 32: executable_statement_list (RETURN) ->  assignment_statement_list RETURN return_value ';'
     {315, 1}, // 33: return_value ->  comparision_expression
     {315, 0}, // 34: return_value ->  <empty>
     {316, 0}, // 35: assignment_statement_list ->  <empty>
     {316, 2}, // 36: assignment_statement_list ->  assignment_statement_list assignment_statement
     {317, 4}, // 37: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP comparision_expression ';'
     {317, 1}, // 38: assignment_statement ->  if_block
     {317, 1}, // 39: assignment_statement ->  goto_statement
     {317, 2}, // 40: assignment_statement (';') ->  func_call ';'
     {318, 11}, // 41: if_block (IF) ->  IF '(' comparision_expression ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'
     {319, 3}, // 42: goto_statement (GOTO) ->  GOTO BASIC_BLOCK ';'
     {320, 1}, // 43: comparision_expression ->  arith_expression
     {320, 3}, // 44: comparision_expression (GT) ->  comparision_expression GT comparision_expression
     {320, 3}, // 45: comparision_expression (LT) ->  comparision_expression LT comparision_expression
     {320, 3}, // 46: comparision_expression (GE) ->  comparision_expression GE comparision_expression
     {320, 3}, // 47: comparision_expression (LE) ->  comparision_expression LE comparision_expression
     {320, 3}, // 48: comparision_expression (EQ) ->  comparision_expression EQ comparision_expression
     {320, 3}, // 49: comparision_expression (NE) ->  comparision_expression NE comparision_expression
     {321, 2}, // 50: arith_expression ('-') ->  '-' atomic_expr
     {321, 4}, // 51: arith_expression ('-') ->  '-' '(' comparision_expression ')'
     {321, 4}, // 52: arith_expression ('(') ->  '(' type_declaration ')' atomic_expr
     {321, 6}, // 53: arith_expression ('(') ->  '(' type_declaration ')' '(' comparision_expression ')'
     {321, 3}, // 54: arith_expression ('(') ->  '(' comparision_expression ')'
     {321, 1}, // 55: arith_expression ->  atomic_expr
     {321, 3}, // 56: arith_expression ('*') ->  arith_expression '*' arith_expression
     {321, 3}, // 57: arith_expression ('/') ->  arith_expression '/' arith_expression
     {321, 3}, // 58: arith_expression ('+') ->  arith_expression '+' arith_expression
     {321, 3}, // 59: arith_expression ('-') ->  arith_expression '-' arith_expression
     {322, 1}, // 60: atomic_expr ->  variable
     {322, 1}, // 61: atomic_expr ->  constant
     {322, 1}, // 62: atomic_expr ->  func_call
     {323, 4}, // 63: func_call (NAME) ->  NAME '(' pass_variable_list ')'
     {323, 3}, // 64: func_call (NAME) ->  NAME '(' ')'
     {324, 3}, // 65: pass_variable_list (',') ->  comparision_expression ',' pass_variable_list
     {324, 1}, // 66: pass_variable_list ->  comparision_expression
     {325, 1}, // 67: variable (NAME) ->  NAME
     {326, 1}, // 68: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
     {326, 1}, // 69: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
     {327, 1}, // 70: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  10} },                              
    { {     296}, {   1} }, // program                   
    { {     309}, {   2} }, // declaration_statement_list
    { {     297}, {   3} }, // procedure_decls           
    { {     310}, {   4} }, // declaration_statement     
    { {     311}, {   5} }, // type_declaration          
    { {     262}, {   6} }, // INTEGER                   
    { {     263}, {   7} }, // FLOAT                     
    { {     264}, {   8} }, // DOUBLE                    
    { {     265}, {   9} }, // VOID                      
    { {       0}, { -12} },                              
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_DEF}, {   8} },                         
    { {     297}, {  10} }, // procedure_decls      
    { {     310}, {  11} }, // declaration_statement
    { {     311}, {   5} }, // type_declaration     
    { {     262}, {   6} }, // INTEGER              
    { {     263}, {   7} }, // FLOAT                
    { {     264}, {   8} }, // DOUBLE               
    { {     265}, {   9} }, // VOID                 
    { {       0}, { -12} },                         
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  4} },                  
    { {     298}, { 12} }, // procedure_list
    { {     300}, { 13} }, // procedure_name
    { {     260}, { 14} }, // NAME          
    { {       0}, { -7} },                  
};

SR__ s_4[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 15} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_6[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {  2} },         
    { {     299}, { 16} }, // #0001
    { {       0}, { -2} },         
};

SR__ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {  2} },         
    { {     302}, { 17} }, // #0002
    { {       0}, { -5} },         
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 18} }, // '('
    { {         0}, {  0} },       
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        40}, { 19} }, // '('
    { {        59}, { 20} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_16[] =
{
    { { REQ_DEF}, {  4} },                  
    { {     298}, { 21} }, // procedure_list
    { {     300}, { 13} }, // procedure_name
    { {     260}, { 14} }, // NAME          
    { {       0}, { -7} },                  
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  3} },                  
    { {       301}, { 22} }, // procedure_body
    { {       123}, { 23} }, // '{'           
    { {         0}, {  0} },                  
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  9} },                    
    { {       306}, { 24} }, // argument_list   
    { {        41}, { 25} }, // ')'             
    { {       307}, { 26} }, // argument        
    { {       311}, { 27} }, // type_declaration
    { {       262}, {  6} }, // INTEGER         
    { {       263}, {  7} }, // FLOAT           
    { {       264}, {  8} }, // DOUBLE          
    { {       265}, {  9} }, // VOID            
    { {         0}, {  0} },                    
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, {  9} },                    
    { {       306}, { 28} }, // argument_list   
    { {        41}, { 29} }, // ')'             
    { {       307}, { 26} }, // argument        
    { {       311}, { 27} }, // type_declaration
    { {       262}, {  6} }, // INTEGER         
    { {       263}, {  7} }, // FLOAT           
    { {       264}, {  8} }, // DOUBLE          
    { {       265}, {  9} }, // VOID            
    { {         0}, {  0} },                    
};

SR__ s_20[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {  2} },         
    { {     303}, { 30} }, // #0003
    { {       0}, { -6} },         
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, { 11} },                              
    { {       309}, { 31} }, // declaration_statement_list
    { {       312}, { 32} }, // basic_block_list          
    { {       310}, {  4} }, // declaration_statement     
    { {       313}, { 33} }, // basic_block               
    { {       311}, { 34} }, // type_declaration          
    { {       258}, { 35} }, // BASIC_BLOCK               
    { {       262}, {  6} }, // INTEGER                   
    { {       263}, {  7} }, // FLOAT                     
    { {       264}, {  8} }, // DOUBLE                    
    { {       265}, {  9} }, // VOID                      
    { {         0}, {  0} },                              
};

SR__ s_24[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 36} }, // ')'
    { {        44}, { 37} }, // ','
    { {         0}, {  0} },       
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 38} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, {  3} },       
    { {        41}, { 39} }, // ')'
    { {        44}, { 37} }, // ','
    { {         0}, {  0} },       
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 40} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_30[] =
{
    { { REQ_DEF}, {  4} },                  
    { {     298}, { 41} }, // procedure_list
    { {     300}, { 13} }, // procedure_name
    { {     260}, { 14} }, // NAME          
    { {       0}, { -7} },                  
};

SR__ s_31[] =
{
    { { REQ_DEF}, {   8} },                         
    { {     308}, {  42} }, // #0006                
    { {     310}, {  11} }, // declaration_statement
    { {     311}, {  34} }, // type_declaration     
    { {     262}, {   6} }, // INTEGER              
    { {     263}, {   7} }, // FLOAT                
    { {     264}, {   8} }, // DOUBLE               
    { {     265}, {   9} }, // VOID                 
    { {       0}, { -19} },                         
};

SR__ s_32[] =
{
    { { REQ_TOKEN}, {  4} },               
    { {       125}, { 43} }, // '}'        
    { {       313}, { 44} }, // basic_block
    { {       258}, { 35} }, // BASIC_BLOCK
    { {         0}, {  0} },               
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_34[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 45} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_35[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 46} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  7} },                    
    { {       307}, { 47} }, // argument        
    { {       311}, { 27} }, // type_declaration
    { {       262}, {  6} }, // INTEGER         
    { {       263}, {  7} }, // FLOAT           
    { {       264}, {  8} }, // DOUBLE          
    { {       265}, {  9} }, // VOID            
    { {         0}, {  0} },                    
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_39[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 48} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_40[] =
{
    { { DEF_RED}, {   2} },         
    { {     305}, {  49} }, // #0005
    { {       0}, { -11} },         
};

SR__ s_41[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  4} },                    
    { {       312}, { 50} }, // basic_block_list
    { {       313}, { 33} }, // basic_block     
    { {       258}, { 35} }, // BASIC_BLOCK     
    { {         0}, {  0} },                    
};

SR__ s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 20} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_46[] =
{
    { { DEF_RED}, {   3} },                             
    { {     314}, {  51} }, // executable_statement_list
    { {     316}, {  52} }, // assignment_statement_list
    { {       0}, { -35} },                             
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {  2} },         
    { {     304}, { 53} }, // #0004
    { {       0}, { -9} },         
};

SR__ s_49[] =
{
    { { REQ_DEF}, {   7} },                    
    { {     297}, {  54} }, // procedure_decls 
    { {     311}, {  55} }, // type_declaration
    { {     262}, {   6} }, // INTEGER         
    { {     263}, {   7} }, // FLOAT           
    { {     264}, {   8} }, // DOUBLE          
    { {     265}, {   9} }, // VOID            
    { {       0}, { -12} },                    
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  4} },               
    { {       125}, { 56} }, // '}'        
    { {       313}, { 44} }, // basic_block
    { {       258}, { 35} }, // BASIC_BLOCK
    { {         0}, {  0} },               
};

SR__ s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_52[] =
{
    { { REQ_DEF}, {  10} },                        
    { {     261}, {  57} }, // RETURN              
    { {     317}, {  58} }, // assignment_statement
    { {     325}, {  59} }, // variable            
    { {     318}, {  60} }, // if_block            
    { {     319}, {  61} }, // goto_statement      
    { {     323}, {  62} }, // func_call           
    { {     260}, {  63} }, // NAME                
    { {     266}, {  64} }, // IF                  
    { {     268}, {  65} }, // GOTO                
    { {       0}, { -31} },                        
};

SR__ s_53[] =
{
    { { REQ_DEF}, {   7} },                    
    { {     297}, {  66} }, // procedure_decls 
    { {     311}, {  55} }, // type_declaration
    { {     262}, {   6} }, // INTEGER         
    { {     263}, {   7} }, // FLOAT           
    { {     264}, {   8} }, // DOUBLE          
    { {     265}, {   9} }, // VOID            
    { {       0}, { -12} },                    
};

SR__ s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 67} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_56[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_57[] =
{
    { { REQ_DEF}, {  13} },                          
    { {     315}, {  68} }, // return_value          
    { {     320}, {  69} }, // comparision_expression
    { {     321}, {  70} }, // arith_expression      
    { {      45}, {  71} }, // '-'                   
    { {      40}, {  72} }, // '('                   
    { {     322}, {  73} }, // atomic_expr           
    { {     325}, {  74} }, // variable              
    { {     326}, {  75} }, // constant              
    { {     323}, {  76} }, // func_call             
    { {     260}, {  63} }, // NAME                  
    { {     257}, {  77} }, // INTEGER_NUMBER        
    { {     259}, {  78} }, // FLOAT_NUMBER          
    { {       0}, { -34} },                          
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       269}, { 79} }, // ASSIGN_OP
    { {         0}, {  0} },             
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 80} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_63[] =
{
    { { REQ_DEF}, {   2} },       
    { {      40}, {  81} }, // '('
    { {       0}, { -67} },       
};

SR__ s_64[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 82} }, // '('
    { {         0}, {  0} },       
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {  2} },               
    { {       258}, { 83} }, // BASIC_BLOCK
    { {         0}, {  0} },               
};

SR__ s_66[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 19} }, // '('
    { {         0}, {  0} },       
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 84} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_69[] =
{
    { { REQ_DEF}, {   7} },      
    { {     274}, {  85} }, // GT
    { {     272}, {  86} }, // LT
    { {     275}, {  87} }, // GE
    { {     273}, {  88} }, // LE
    { {     271}, {  89} }, // EQ
    { {     270}, {  90} }, // NE
    { {       0}, { -33} },      
};

SR__ s_70[] =
{
    { { REQ_DEF}, {   5} },       
    { {      42}, {  91} }, // '*'
    { {      47}, {  92} }, // '/'
    { {      43}, {  93} }, // '+'
    { {      45}, {  94} }, // '-'
    { {       0}, { -43} },       
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  9} },                  
    { {       322}, { 95} }, // atomic_expr   
    { {        40}, { 96} }, // '('           
    { {       325}, { 74} }, // variable      
    { {       326}, { 75} }, // constant      
    { {       323}, { 76} }, // func_call     
    { {       260}, { 63} }, // NAME          
    { {       257}, { 77} }, // INTEGER_NUMBER
    { {       259}, { 78} }, // FLOAT_NUMBER  
    { {         0}, {  0} },                  
};

SR__ s_72[] =
{
    { { REQ_TOKEN}, { 17} },                          
    { {       311}, { 97} }, // type_declaration      
    { {       320}, { 98} }, // comparision_expression
    { {       262}, {  6} }, // INTEGER               
    { {       263}, {  7} }, // FLOAT                 
    { {       264}, {  8} }, // DOUBLE                
    { {       265}, {  9} }, // VOID                  
    { {       321}, { 70} }, // arith_expression      
    { {        45}, { 71} }, // '-'                   
    { {        40}, { 72} }, // '('                   
    { {       322}, { 73} }, // atomic_expr           
    { {       325}, { 74} }, // variable              
    { {       326}, { 75} }, // constant              
    { {       323}, { 76} }, // func_call             
    { {       260}, { 63} }, // NAME                  
    { {       257}, { 77} }, // INTEGER_NUMBER        
    { {       259}, { 78} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_74[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_77[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, { 12} },                          
    { {       320}, { 99} }, // comparision_expression
    { {       321}, { 70} }, // arith_expression      
    { {        45}, { 71} }, // '-'                   
    { {        40}, { 72} }, // '('                   
    { {       322}, { 73} }, // atomic_expr           
    { {       325}, { 74} }, // variable              
    { {       326}, { 75} }, // constant              
    { {       323}, { 76} }, // func_call             
    { {       260}, { 63} }, // NAME                  
    { {       257}, { 77} }, // INTEGER_NUMBER        
    { {       259}, { 78} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_80[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  14} },                          
    { {       324}, { 100} }, // pass_variable_list    
    { {        41}, { 101} }, // ')'                   
    { {       320}, { 102} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 103} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 104} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 105} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_86[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 106} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 107} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 108} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 109} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 110} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  11} },                    
    { {       321}, { 111} }, // arith_expression
    { {        45}, {  71} }, // '-'             
    { {        40}, {  72} }, // '('             
    { {       322}, {  73} }, // atomic_expr     
    { {       325}, {  74} }, // variable        
    { {       326}, {  75} }, // constant        
    { {       323}, {  76} }, // func_call       
    { {       260}, {  63} }, // NAME            
    { {       257}, {  77} }, // INTEGER_NUMBER  
    { {       259}, {  78} }, // FLOAT_NUMBER    
    { {         0}, {   0} },                    
};

SR__ s_92[] =
{
    { { REQ_TOKEN}, {  11} },                    
    { {       321}, { 112} }, // arith_expression
    { {        45}, {  71} }, // '-'             
    { {        40}, {  72} }, // '('             
    { {       322}, {  73} }, // atomic_expr     
    { {       325}, {  74} }, // variable        
    { {       326}, {  75} }, // constant        
    { {       323}, {  76} }, // func_call       
    { {       260}, {  63} }, // NAME            
    { {       257}, {  77} }, // INTEGER_NUMBER  
    { {       259}, {  78} }, // FLOAT_NUMBER    
    { {         0}, {   0} },                    
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {  11} },                    
    { {       321}, { 113} }, // arith_expression
    { {        45}, {  71} }, // '-'             
    { {        40}, {  72} }, // '('             
    { {       322}, {  73} }, // atomic_expr     
    { {       325}, {  74} }, // variable        
    { {       326}, {  75} }, // constant        
    { {       323}, {  76} }, // func_call       
    { {       260}, {  63} }, // NAME            
    { {       257}, {  77} }, // INTEGER_NUMBER  
    { {       259}, {  78} }, // FLOAT_NUMBER    
    { {         0}, {   0} },                    
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  11} },                    
    { {       321}, { 114} }, // arith_expression
    { {        45}, {  71} }, // '-'             
    { {        40}, {  72} }, // '('             
    { {       322}, {  73} }, // atomic_expr     
    { {       325}, {  74} }, // variable        
    { {       326}, {  75} }, // constant        
    { {       323}, {  76} }, // func_call       
    { {       260}, {  63} }, // NAME            
    { {       257}, {  77} }, // INTEGER_NUMBER  
    { {       259}, {  78} }, // FLOAT_NUMBER    
    { {         0}, {   0} },                    
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_96[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 115} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 116} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        41}, { 117} }, // ')'
    { {       274}, {  85} }, // GT 
    { {       272}, {  86} }, // LT 
    { {       275}, {  87} }, // GE 
    { {       273}, {  88} }, // LE 
    { {       271}, {  89} }, // EQ 
    { {       270}, {  90} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        59}, { 118} }, // ';'
    { {       274}, {  85} }, // GT 
    { {       272}, {  86} }, // LT 
    { {       275}, {  87} }, // GE 
    { {       273}, {  88} }, // LE 
    { {       271}, {  89} }, // EQ 
    { {       270}, {  90} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        41}, { 119} }, // ')'
    { {         0}, {   0} },       
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_102[] =
{
    { { REQ_DEF}, {   8} },       
    { {      44}, { 120} }, // ','
    { {     274}, {  85} }, // GT 
    { {     272}, {  86} }, // LT 
    { {     275}, {  87} }, // GE 
    { {     273}, {  88} }, // LE 
    { {     271}, {  89} }, // EQ 
    { {     270}, {  90} }, // NE 
    { {       0}, { -66} },       
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        41}, { 121} }, // ')'
    { {       274}, {  85} }, // GT 
    { {       272}, {  86} }, // LT 
    { {       275}, {  87} }, // GE 
    { {       273}, {  88} }, // LE 
    { {       271}, {  89} }, // EQ 
    { {       270}, {  90} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_105[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_106[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_107[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_108[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_109[] =
{
    { { REQ_DEF}, {   5} },      
    { {     274}, {  85} }, // GT
    { {     272}, {  86} }, // LT
    { {     275}, {  87} }, // GE
    { {     273}, {  88} }, // LE
    { {       0}, { -48} },      
};

SR__ s_110[] =
{
    { { REQ_DEF}, {   5} },      
    { {     274}, {  85} }, // GT
    { {     272}, {  86} }, // LT
    { {     275}, {  87} }, // GE
    { {     273}, {  88} }, // LE
    { {       0}, { -49} },      
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_112[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  91} }, // '*'
    { {      47}, {  92} }, // '/'
    { {       0}, { -58} },       
};

SR__ s_114[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  91} }, // '*'
    { {      47}, {  92} }, // '/'
    { {       0}, { -59} },       
};

SR__ s_115[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        41}, { 122} }, // ')'
    { {       274}, {  85} }, // GT 
    { {       272}, {  86} }, // LT 
    { {       275}, {  87} }, // GE 
    { {       273}, {  88} }, // LE 
    { {       271}, {  89} }, // EQ 
    { {       270}, {  90} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_116[] =
{
    { { REQ_TOKEN}, {   9} },                  
    { {       322}, { 123} }, // atomic_expr   
    { {        40}, { 124} }, // '('           
    { {       325}, {  74} }, // variable      
    { {       326}, {  75} }, // constant      
    { {       323}, {  76} }, // func_call     
    { {       260}, {  63} }, // NAME          
    { {       257}, {  77} }, // INTEGER_NUMBER
    { {       259}, {  78} }, // FLOAT_NUMBER  
    { {         0}, {   0} },                  
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {  13} },                          
    { {       324}, { 125} }, // pass_variable_list    
    { {       320}, { 102} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_121[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       268}, { 126} }, // GOTO
    { {         0}, {   0} },        
};

SR__ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {  12} },                          
    { {       320}, { 127} }, // comparision_expression
    { {       321}, {  70} }, // arith_expression      
    { {        45}, {  71} }, // '-'                   
    { {        40}, {  72} }, // '('                   
    { {       322}, {  73} }, // atomic_expr           
    { {       325}, {  74} }, // variable              
    { {       326}, {  75} }, // constant              
    { {       323}, {  76} }, // func_call             
    { {       260}, {  63} }, // NAME                  
    { {       257}, {  77} }, // INTEGER_NUMBER        
    { {       259}, {  78} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_125[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_126[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       258}, { 128} }, // BASIC_BLOCK
    { {         0}, {   0} },               
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        41}, { 129} }, // ')'
    { {       274}, {  85} }, // GT 
    { {       272}, {  86} }, // LT 
    { {       275}, {  87} }, // GE 
    { {       273}, {  88} }, // LE 
    { {       271}, {  89} }, // EQ 
    { {       270}, {  90} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 130} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       267}, { 131} }, // ELSE
    { {         0}, {   0} },        
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       268}, { 132} }, // GOTO
    { {         0}, {   0} },        
};

SR__ s_132[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       258}, { 133} }, // BASIC_BLOCK
    { {         0}, {   0} },               
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 134} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_134[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 2:
        d_val__ = d_vsp__[-1];
        {
         #if 1
         program_object.set_global_table(*d_vsp__[-1].symbol_table);
         #endif
         }
        break;

        case 5:
        d_val__ = d_vsp__[0];
        {
         #if 1
         return_statement_used_flag = false; 
         #endif
         }
        break;

        case 6:
        d_val__ = d_vsp__[-2];
        { 
         #if 1
         #endif
         }
        break;

        case 9:
        d_val__ = d_vsp__[-5];
        { 
         #if 1
         current_procedure = new Procedure(d_vsp__[-5].data_type, *d_vsp__[-4].string_value);
         current_procedure->set_argument_list(*d_vsp__[-2].symbol_table);
         program_object.set_procedure_map(*current_procedure);
         delete d_vsp__[-2].symbol_table;
         #endif
         }
        break;

        case 11:
        d_val__ = d_vsp__[-4];
        {
         #if 1
         current_procedure = new Procedure(d_vsp__[-4].data_type, *d_vsp__[-3].string_value);
         Symbol_Table temp_list;
         current_procedure->set_argument_list(temp_list);
         program_object.set_procedure_map(*current_procedure);
         #endif
         }
        break;

        case 13:
        { 
         printf("yoyo\n");
         #if 1
         current_procedure = program_object.get_procedure(*d_vsp__[-3].string_value);
         #endif
         }
        break;

        case 14:
        {
         #if 1
         printf("yo\n");
         current_procedure = program_object.get_procedure(*d_vsp__[-2].string_value);
         printf("dude\n"); 
         #endif
         }
        break;

        case 15:
        {
         #if 1
         
         
         int line = get_line_number();
         program_object.variable_in_proc_map_check(d_vsp__[0].symbol_entry->get_variable_name(), line);
         string arg_name = d_vsp__[0].symbol_entry->get_variable_name();
         if (current_procedure && current_procedure->get_proc_name() == arg_name)
         {
         int line = get_line_number();
         report_error("Argument name cannot be same as procedure name", line);
         }
         if (d_vsp__[-2].symbol_table != NULL)
         {
         if(d_vsp__[-2].symbol_table->variable_in_symbol_list_check(arg_name))
         {
         int line = get_line_number();
         report_error("Argument name is used twice", line);
         }
         d_val__.symbol_table = d_vsp__[-2].symbol_table;
         }
         else
         d_val__.symbol_table = new Symbol_Table();
         d_val__.symbol_table->push_symbol(d_vsp__[0].symbol_entry);
         #endif
         }
        break;

        case 16:
        {
         #if 1
         int line = get_line_number();
         program_object.variable_in_proc_map_check(d_vsp__[0].symbol_entry->get_variable_name(), line);
         string var_name = d_vsp__[0].symbol_entry->get_variable_name();
         if (current_procedure && current_procedure->get_proc_name() == var_name)
         {
         int line = get_line_number();
         report_error("Argument name cannot be same as procedure name", line);
         }
         d_val__.symbol_table = new Symbol_Table();
         d_val__.symbol_table->push_symbol(d_vsp__[0].symbol_entry);
         #endif
         }
        break;

        case 17:
        {
         #if 1
         d_val__.symbol_entry = new Symbol_Table_Entry(*d_vsp__[0].string_value, d_vsp__[-1].data_type);
         delete d_vsp__[0].string_value;
         #endif
         }
        break;

        case 18:
        {
         #if 1
         
         
         
         
         
         
         current_procedure->set_basic_block_list(*d_vsp__[-1].basic_block_list);
         delete d_vsp__[-1].basic_block_list;
         #endif
         }
        break;

        case 19:
        d_val__ = d_vsp__[-1];
        { 
         if(d_vsp__[0].symbol_table==NULL)
         printf("mama\n");
         else
         printf("ouch\n");
         #if 1
         
         current_procedure->set_local_list(*d_vsp__[0].symbol_table);
         printf("no\n");
         delete d_vsp__[0].symbol_table;
         #endif
         }
        break;

        case 20:
        {
         #if 1
         
         
         
         
         
         current_procedure->set_basic_block_list(*d_vsp__[-1].basic_block_list);
         delete d_vsp__[-1].basic_block_list;
         #endif
         }
        break;

        case 21:
        {
         #if 1
         int line = get_line_number();
         program_object.variable_in_proc_map_check(d_vsp__[0].symbol_entry->get_variable_name(), line);
         string var_name = d_vsp__[0].symbol_entry->get_variable_name();
         if (current_procedure && current_procedure->get_proc_name() == var_name)
         {
         int line = get_line_number();
         report_error("Variable name cannot be same as procedure name", line);
         }
         d_val__.symbol_table = new Symbol_Table();
         d_val__.symbol_table->push_symbol(d_vsp__[0].symbol_entry);
         #endif
         }
        break;

        case 22:
        {
         #if 1
         
         
         int line = get_line_number();
         program_object.variable_in_proc_map_check(d_vsp__[0].symbol_entry->get_variable_name(), line);
         string var_name = d_vsp__[0].symbol_entry->get_variable_name();
         if (current_procedure && current_procedure->get_proc_name() == var_name)
         {
         int line = get_line_number();
         report_error("Variable name cannot be same as procedure name", line);
         }
         if (d_vsp__[-1].symbol_table != NULL)
         {
         if(d_vsp__[-1].symbol_table->variable_in_symbol_list_check(var_name))
         {
         int line = get_line_number();
         report_error("Variable is declared twice", line);
         }
         d_val__.symbol_table = d_vsp__[-1].symbol_table;
         }
         else
         d_val__.symbol_table = new Symbol_Table();
         d_val__.symbol_table->push_symbol(d_vsp__[0].symbol_entry);
         #endif
         }
        break;

        case 23:
        {
         #if 1
         d_val__.symbol_entry = new Symbol_Table_Entry(*d_vsp__[-1].string_value, d_vsp__[-2].data_type);
         delete d_vsp__[-1].string_value;
         #endif
         }
        break;

        case 24:
        {
         #if 1
         d_val__.data_type=int_data_type;
         #endif
         }
        break;

        case 25:
        {
         #if 1
         d_val__.data_type=float_data_type;
         #endif
         }
        break;

        case 26:
        {
         #if 1
         d_val__.data_type=float_data_type;
         #endif
         }
        break;

        case 27:
        {
         #if 1
         d_val__.data_type=void_data_type;
         #endif
         }
        break;

        case 28:
        {
         #if 1
         printf("sai\n");
         if (!d_vsp__[0].basic_block)
         {
         int line = get_line_number();
         report_error("Basic block doesn't exist", line);
         }
         bb_strictly_increasing_order_check(d_val__.basic_block_list, d_vsp__[0].basic_block->get_bb_number());
         d_val__.basic_block_list = d_vsp__[-1].basic_block_list;
         d_val__.basic_block_list->push_back(d_vsp__[0].basic_block);
         #endif
         }
        break;

        case 29:
        {
         #if 1
         printf("krish\n");
         if (!d_vsp__[0].basic_block)
         {
         int line = get_line_number();
         report_error("Basic block doesn't exist", line);
         }
         d_val__.basic_block_list = new list<Basic_Block *>;
         d_val__.basic_block_list->push_back(d_vsp__[0].basic_block);
         #endif
         }
        break;

        case 30:
        {
         #if 1
         if (d_vsp__[0].ast_list != NULL)
         d_val__.basic_block = new Basic_Block(d_vsp__[-2].integer_value, *d_vsp__[0].ast_list);
         else
         {
         printf("ayya\n");
         list<Ast *> * a_li= new list<Ast *>;
         d_val__.basic_block = new Basic_Block(d_vsp__[-2].integer_value, *a_li);
         }
         delete d_vsp__[0].ast_list;
         
         #endif
         }
        break;

        case 31:
        {
         #if 1
         d_val__.ast_list = d_vsp__[0].ast_list;
         #endif
         }
        break;

        case 32:
        {
         #if 1
         Ast * ret = new Return_Ast(d_vsp__[-1].ast);
         return_statement_used_flag = true; 
         if (d_vsp__[-3].ast_list != NULL)
         d_val__.ast_list = d_vsp__[-3].ast_list;
         else
         d_val__.ast_list = new list<Ast *>;
         d_val__.ast_list->push_back(ret);
         #endif
         }
        break;

        case 33:
        {
         #if 1
         d_val__.ast = d_vsp__[0].ast;
         #endif
         }
        break;

        case 34:
        {
         #if 1
         d_val__.ast = NULL;
         #endif
         }
        break;

        case 35:
        {
         #if 1
         d_val__.ast_list = new list <Ast *>;
         #endif
         }
        break;

        case 36:
        {
         #if 1
         if (d_vsp__[-1].ast_list == NULL)
         d_val__.ast_list = new list<Ast *>;
         else
         d_val__.ast_list = d_vsp__[-1].ast_list;
         d_val__.ast_list->push_back(d_vsp__[0].ast);
         #endif
         }
        break;

        case 37:
        {
         #if 1
         
         d_val__.ast=new Assignment_Ast(d_vsp__[-3].ast,d_vsp__[-1].ast);
         d_val__.ast->check_ast(get_line_number());
         
         #endif
         }
        break;

        case 38:
        {
         #if 1
         d_val__.ast = d_vsp__[0].ast;
         #endif
         }
        break;

        case 39:
        {
         #if 1
         d_val__.ast = d_vsp__[0].ast;
         #endif
         }
        break;

        case 40:
        {
         #if 1
         d_val__.ast=d_vsp__[-1].ast;
         #endif
         }
        break;

        case 41:
        {
         #if 1
         d_val__.ast = new If_Ast(d_vsp__[-8].ast, d_vsp__[-5].integer_value, d_vsp__[-1].integer_value);
         #endif
         }
        break;

        case 42:
        { 
         #if 1
         d_val__.ast = new Goto_Ast(d_vsp__[-1].integer_value);
         #endif
         }
        break;

        case 43:
        {
         #if 1
         d_val__.ast= d_vsp__[0].ast;
         #endif
         }
        break;

        case 44:
        {
         #if 1
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 45:
        {
         #if 1
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 46:
        { 
         #if 1
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 47:
        {
         #if 1
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 48:
        {
         #if 1
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 49:
        {
         #if 1
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 50:
        {
         #if 1
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,0);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 51:
        {
         #if 1
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-1].ast,NULL,0);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 52:
        {
         #if 1
         if(d_vsp__[-2].data_type==int_data_type)
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,2);
         else if(d_vsp__[-2].data_type==float_data_type)
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,1);
         else
         report_error("Typecasting can be only int or float", get_line_number());;
         
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 53:
        {
         #if 1
         if(d_vsp__[-4].data_type==int_data_type)
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-1].ast,NULL,2);
         else if(d_vsp__[-4].data_type==float_data_type)
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-1].ast,NULL,1);
         else
         report_error("Typecasting can be only int or float", get_line_number());;
         
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 54:
        {
         #if 1
         d_val__.ast=d_vsp__[-1].ast;
         #endif
         }
        break;

        case 55:
        { 
         #if 1
         d_val__.ast = d_vsp__[0].ast;
         #endif
         }
        break;

        case 56:
        {
         #if 1
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,0);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 57:
        {
         #if 1
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,1);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 58:
        {
         #if 1
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,2);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 59:
        {
         #if 1
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast, 3);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 60:
        {
         #if 1
         d_val__.ast=d_vsp__[0].ast;
         #endif
         }
        break;

        case 61:
        {
         #if 1
         d_val__.ast=d_vsp__[0].ast;
         #endif
         }
        break;

        case 62:
        {
         #if 1
         d_val__.ast=d_vsp__[0].ast;
         #endif
         }
        break;

        case 63:
        {
         #if 1
         d_val__.ast=new Function_Ast(*d_vsp__[-3].string_value,*d_vsp__[-1].ast_list);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 64:
        {
         #if 1
         list<Ast *> * param_list = new list<Ast*>;
         d_val__.ast = new Function_Ast(*d_vsp__[-2].string_value,*param_list);
         d_val__.ast->check_ast(get_line_number());
         #endif
         }
        break;

        case 65:
        {
         #if 1
         if(d_val__.ast_list==NULL)
         d_val__.ast_list=new list<Ast *>;
         d_val__.ast_list->push_back(d_vsp__[-2].ast);
         #endif
         }
        break;

        case 66:
        {
         #if 1
         d_val__.ast_list = new list<Ast *>;
         d_val__.ast_list->push_back(d_vsp__[0].ast);
         #endif
         }
        break;

        case 67:
        {
         #if 1
         Symbol_Table_Entry var_table_entry;
         if (current_procedure->variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = current_procedure->get_symbol_table_entry(*d_vsp__[0].string_value);
         else if (program_object.variable_in_symbol_list_check(*d_vsp__[0].string_value))
         var_table_entry = program_object.get_symbol_table_entry(*d_vsp__[0].string_value);
         else
         {
         int line = get_line_number();
         report_error("Variable has not been declared", line);
         }
         d_val__.ast = new Name_Ast(*d_vsp__[0].string_value, var_table_entry);
         delete d_vsp__[0].string_value;
         #endif
         }
        break;

        case 68:
        {
         #if 1
         d_val__.ast = new Number_Ast<int>(d_vsp__[0].integer_value, int_data_type);
         #endif
         }
        break;

        case 69:
        {
         #if 1
         d_val__.ast= new Number_Ast<float> (d_vsp__[0].float_value,float_data_type);
         #endif
         }
        break;

    }
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

