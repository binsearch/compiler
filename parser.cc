// Generated by Bisonc++ V2.09.03 on Tue, 08 Apr 2014 14:54:19 +0530

// $insert class.ih
#include "parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {290, 2}, // 1: program ->  optional_declaration_list procedure_definition
     {291, 0}, // 2: optional_declaration_list ->  <empty>
     {291, 1}, // 3: optional_declaration_list ->  variable_declaration_list
     {292, 9}, // 4: procedure_definition (NAME) ->  NAME '(' ')' #0001 '{' optional_variable_declaration_list #0002 basic_block_list '}'
     {293, 0}, // 5: #0001 ->  <empty>
     {294, 0}, // 6: #0002 ->  <empty>
     {295, 0}, // 7: optional_variable_declaration_list ->  <empty>
     {295, 1}, // 8: optional_variable_declaration_list ->  variable_declaration_list
     {296, 1}, // 9: variable_declaration_list ->  variable_declaration
     {296, 2}, // 10: variable_declaration_list ->  variable_declaration_list variable_declaration
     {297, 2}, // 11: variable_declaration (';') ->  declaration ';'
     {298, 2}, // 12: declaration (INTEGER) ->  INTEGER NAME
     {298, 2}, // 13: declaration (FLOAT) ->  FLOAT NAME
     {298, 2}, // 14: declaration (DOUBLE) ->  DOUBLE NAME
     {299, 2}, // 15: basic_block_list ->  basic_block_list basic_block
     {299, 1}, // 16: basic_block_list ->  basic_block
     {300, 3}, // 17: basic_block (BBNUM) ->  BBNUM ':' executable_statement_list
     {301, 1}, // 18: executable_statement_list ->  assignment_statement_list
     {301, 3}, // 19: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
     {302, 0}, // 20: assignment_statement_list ->  <empty>
     {302, 2}, // 21: assignment_statement_list ->  assignment_statement_list assignment_statement
     {303, 4}, // 22: assignment_statement (ASSIGN) ->  variable ASSIGN comparision_expression ';'
     {303, 1}, // 23: assignment_statement ->  if_block
     {303, 1}, // 24: assignment_statement ->  goto_statement
     {304, 11}, // 25: if_block (IF) ->  IF '(' comparision_expression ')' GOTO BBNUM ';' ELSE GOTO BBNUM ';'
     {305, 3}, // 26: goto_statement (GOTO) ->  GOTO BBNUM ';'
     {306, 3}, // 27: comparision_expression (GT) ->  comparision_expression GT comparision_expression
     {306, 3}, // 28: comparision_expression (LT) ->  comparision_expression LT comparision_expression
     {306, 3}, // 29: comparision_expression (GE) ->  comparision_expression GE comparision_expression
     {306, 3}, // 30: comparision_expression (LE) ->  comparision_expression LE comparision_expression
     {306, 3}, // 31: comparision_expression (EQ) ->  comparision_expression EQ comparision_expression
     {306, 3}, // 32: comparision_expression (NE) ->  comparision_expression NE comparision_expression
     {306, 1}, // 33: comparision_expression ->  arith_expression
     {307, 2}, // 34: arith_expression ('-') ->  '-' variable
     {307, 2}, // 35: arith_expression ('-') ->  '-' constant
     {307, 4}, // 36: arith_expression ('-') ->  '-' '(' comparision_expression ')'
     {307, 4}, // 37: arith_expression ('(') ->  '(' FLOAT ')' variable
     {307, 4}, // 38: arith_expression ('(') ->  '(' FLOAT ')' constant
     {307, 6}, // 39: arith_expression ('(') ->  '(' FLOAT ')' '(' comparision_expression ')'
     {307, 4}, // 40: arith_expression ('(') ->  '(' INTEGER ')' variable
     {307, 4}, // 41: arith_expression ('(') ->  '(' INTEGER ')' constant
     {307, 6}, // 42: arith_expression ('(') ->  '(' INTEGER ')' '(' comparision_expression ')'
     {307, 4}, // 43: arith_expression ('(') ->  '(' DOUBLE ')' variable
     {307, 4}, // 44: arith_expression ('(') ->  '(' DOUBLE ')' constant
     {307, 6}, // 45: arith_expression ('(') ->  '(' DOUBLE ')' '(' comparision_expression ')'
     {307, 3}, // 46: arith_expression ('(') ->  '(' comparision_expression ')'
     {307, 1}, // 47: arith_expression ->  variable
     {307, 1}, // 48: arith_expression ->  constant
     {307, 3}, // 49: arith_expression ('*') ->  arith_expression '*' arith_expression
     {307, 3}, // 50: arith_expression ('/') ->  arith_expression '/' arith_expression
     {307, 3}, // 51: arith_expression ('+') ->  arith_expression '+' arith_expression
     {307, 3}, // 52: arith_expression ('-') ->  arith_expression '-' arith_expression
     {308, 1}, // 53: variable (NAME) ->  NAME
     {309, 1}, // 54: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
     {309, 1}, // 55: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
     {310, 1}, // 56: program_$ ->  program
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  9} },                             
    { {     290}, {  1} }, // program                  
    { {     291}, {  2} }, // optional_declaration_list
    { {     296}, {  3} }, // variable_declaration_list
    { {     297}, {  4} }, // variable_declaration     
    { {     298}, {  5} }, // declaration              
    { {     262}, {  6} }, // INTEGER                  
    { {     263}, {  7} }, // FLOAT                    
    { {     264}, {  8} }, // DOUBLE                   
    { {       0}, { -2} },                             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { REQ_TOKEN}, {  3} },                        
    { {       292}, {  9} }, // procedure_definition
    { {       260}, { 10} }, // NAME                
    { {         0}, {  0} },                        
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  6} },                        
    { {     297}, { 11} }, // variable_declaration
    { {     298}, {  5} }, // declaration         
    { {     262}, {  6} }, // INTEGER             
    { {     263}, {  7} }, // FLOAT               
    { {     264}, {  8} }, // DOUBLE              
    { {       0}, { -3} },                        
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_5[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 12} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 13} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 14} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       260}, { 15} }, // NAME
    { {         0}, {  0} },        
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 16} }, // '('
    { {         0}, {  0} },       
};

SR__ s_11[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_12[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_13[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_15[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 17} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_17[] =
{
    { { DEF_RED}, {  2} },         
    { {     293}, { 18} }, // #0001
    { {       0}, { -5} },         
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       123}, { 19} }, // '{'
    { {         0}, {  0} },       
};

SR__ s_19[] =
{
    { { REQ_DEF}, {  8} },                                      
    { {     295}, { 20} }, // optional_variable_declaration_list
    { {     296}, { 21} }, // variable_declaration_list         
    { {     297}, {  4} }, // variable_declaration              
    { {     298}, {  5} }, // declaration                       
    { {     262}, {  6} }, // INTEGER                           
    { {     263}, {  7} }, // FLOAT                             
    { {     264}, {  8} }, // DOUBLE                            
    { {       0}, { -7} },                                      
};

SR__ s_20[] =
{
    { { DEF_RED}, {  2} },         
    { {     294}, { 22} }, // #0002
    { {       0}, { -6} },         
};

SR__ s_21[] =
{
    { { REQ_DEF}, {  6} },                        
    { {     297}, { 11} }, // variable_declaration
    { {     298}, {  5} }, // declaration         
    { {     262}, {  6} }, // INTEGER             
    { {     263}, {  7} }, // FLOAT               
    { {     264}, {  8} }, // DOUBLE              
    { {       0}, { -8} },                        
};

SR__ s_22[] =
{
    { { REQ_TOKEN}, {  4} },                    
    { {       299}, { 23} }, // basic_block_list
    { {       300}, { 24} }, // basic_block     
    { {       258}, { 25} }, // BBNUM           
    { {         0}, {  0} },                    
};

SR__ s_23[] =
{
    { { REQ_TOKEN}, {  4} },               
    { {       125}, { 26} }, // '}'        
    { {       300}, { 27} }, // basic_block
    { {       258}, { 25} }, // BBNUM      
    { {         0}, {  0} },               
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_25[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        58}, { 28} }, // ':'
    { {         0}, {  0} },       
};

SR__ s_26[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_28[] =
{
    { { DEF_RED}, {   3} },                             
    { {     301}, {  29} }, // executable_statement_list
    { {     302}, {  30} }, // assignment_statement_list
    { {       0}, { -20} },                             
};

SR__ s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_30[] =
{
    { { REQ_DEF}, {   9} },                        
    { {     261}, {  31} }, // RETURN              
    { {     303}, {  32} }, // assignment_statement
    { {     308}, {  33} }, // variable            
    { {     304}, {  34} }, // if_block            
    { {     305}, {  35} }, // goto_statement      
    { {     260}, {  36} }, // NAME                
    { {     265}, {  37} }, // IF                  
    { {     267}, {  38} }, // GOTO                
    { {       0}, { -18} },                        
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 39} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ s_33[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       268}, { 40} }, // ASSIGN
    { {         0}, {  0} },          
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        40}, { 41} }, // '('
    { {         0}, {  0} },       
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       258}, { 42} }, // BBNUM
    { {         0}, {  0} },         
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_40[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 43} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_41[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 51} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_42[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        59}, { 52} }, // ';'
    { {         0}, {  0} },       
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  8} },       
    { {        59}, { 53} }, // ';'
    { {       273}, { 54} }, // GT 
    { {       271}, { 55} }, // LT 
    { {       274}, { 56} }, // GE 
    { {       272}, { 57} }, // LE 
    { {       270}, { 58} }, // EQ 
    { {       269}, { 59} }, // NE 
    { {         0}, {  0} },       
};

SR__ s_44[] =
{
    { { REQ_DEF}, {   5} },       
    { {      42}, {  60} }, // '*'
    { {      47}, {  61} }, // '/'
    { {      43}, {  62} }, // '+'
    { {      45}, {  63} }, // '-'
    { {       0}, { -33} },       
};

SR__ s_45[] =
{
    { { REQ_TOKEN}, {  7} },                  
    { {       308}, { 64} }, // variable      
    { {       309}, { 65} }, // constant      
    { {        40}, { 66} }, // '('           
    { {       260}, { 36} }, // NAME          
    { {       257}, { 49} }, // INTEGER_NUMBER
    { {       259}, { 50} }, // FLOAT_NUMBER  
    { {         0}, {  0} },                  
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 13} },                          
    { {       263}, { 67} }, // FLOAT                 
    { {       262}, { 68} }, // INTEGER               
    { {       264}, { 69} }, // DOUBLE                
    { {       306}, { 70} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  8} },       
    { {        41}, { 71} }, // ')'
    { {       273}, { 54} }, // GT 
    { {       271}, { 55} }, // LT 
    { {       274}, { 56} }, // GE 
    { {       272}, { 57} }, // LE 
    { {       270}, { 58} }, // EQ 
    { {       269}, { 59} }, // NE 
    { {         0}, {  0} },       
};

SR__ s_52[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 72} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 73} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 74} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 75} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_58[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 76} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 77} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  9} },                    
    { {       307}, { 78} }, // arith_expression
    { {        45}, { 45} }, // '-'             
    { {        40}, { 46} }, // '('             
    { {       308}, { 47} }, // variable        
    { {       309}, { 48} }, // constant        
    { {       260}, { 36} }, // NAME            
    { {       257}, { 49} }, // INTEGER_NUMBER  
    { {       259}, { 50} }, // FLOAT_NUMBER    
    { {         0}, {  0} },                    
};

SR__ s_61[] =
{
    { { REQ_TOKEN}, {  9} },                    
    { {       307}, { 79} }, // arith_expression
    { {        45}, { 45} }, // '-'             
    { {        40}, { 46} }, // '('             
    { {       308}, { 47} }, // variable        
    { {       309}, { 48} }, // constant        
    { {       260}, { 36} }, // NAME            
    { {       257}, { 49} }, // INTEGER_NUMBER  
    { {       259}, { 50} }, // FLOAT_NUMBER    
    { {         0}, {  0} },                    
};

SR__ s_62[] =
{
    { { REQ_TOKEN}, {  9} },                    
    { {       307}, { 80} }, // arith_expression
    { {        45}, { 45} }, // '-'             
    { {        40}, { 46} }, // '('             
    { {       308}, { 47} }, // variable        
    { {       309}, { 48} }, // constant        
    { {       260}, { 36} }, // NAME            
    { {       257}, { 49} }, // INTEGER_NUMBER  
    { {       259}, { 50} }, // FLOAT_NUMBER    
    { {         0}, {  0} },                    
};

SR__ s_63[] =
{
    { { REQ_TOKEN}, {  9} },                    
    { {       307}, { 81} }, // arith_expression
    { {        45}, { 45} }, // '-'             
    { {        40}, { 46} }, // '('             
    { {       308}, { 47} }, // variable        
    { {       309}, { 48} }, // constant        
    { {       260}, { 36} }, // NAME            
    { {       257}, { 49} }, // INTEGER_NUMBER  
    { {       259}, { 50} }, // FLOAT_NUMBER    
    { {         0}, {  0} },                    
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_66[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 82} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 83} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 84} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {        41}, { 85} }, // ')'
    { {         0}, {  0} },       
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {  8} },       
    { {        41}, { 86} }, // ')'
    { {       273}, { 54} }, // GT 
    { {       271}, { 55} }, // LT 
    { {       274}, { 56} }, // GE 
    { {       272}, { 57} }, // LE 
    { {       270}, { 58} }, // EQ 
    { {       269}, { 59} }, // NE 
    { {         0}, {  0} },       
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       267}, { 87} }, // GOTO
    { {         0}, {  0} },        
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_73[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ s_74[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_75[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_76[] =
{
    { { REQ_DEF}, {   5} },      
    { {     273}, {  54} }, // GT
    { {     271}, {  55} }, // LT
    { {     274}, {  56} }, // GE
    { {     272}, {  57} }, // LE
    { {       0}, { -31} },      
};

SR__ s_77[] =
{
    { { REQ_DEF}, {   5} },      
    { {     273}, {  54} }, // GT
    { {     271}, {  55} }, // LT
    { {     274}, {  56} }, // GE
    { {     272}, {  57} }, // LE
    { {       0}, { -32} },      
};

SR__ s_78[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_79[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_80[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  60} }, // '*'
    { {      47}, {  61} }, // '/'
    { {       0}, { -51} },       
};

SR__ s_81[] =
{
    { { REQ_DEF}, {   3} },       
    { {      42}, {  60} }, // '*'
    { {      47}, {  61} }, // '/'
    { {       0}, { -52} },       
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  8} },       
    { {        41}, { 88} }, // ')'
    { {       273}, { 54} }, // GT 
    { {       271}, { 55} }, // LT 
    { {       274}, { 56} }, // GE 
    { {       272}, { 57} }, // LE 
    { {       270}, { 58} }, // EQ 
    { {       269}, { 59} }, // NE 
    { {         0}, {  0} },       
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  7} },                  
    { {       308}, { 89} }, // variable      
    { {       309}, { 90} }, // constant      
    { {        40}, { 91} }, // '('           
    { {       260}, { 36} }, // NAME          
    { {       257}, { 49} }, // INTEGER_NUMBER
    { {       259}, { 50} }, // FLOAT_NUMBER  
    { {         0}, {  0} },                  
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {  7} },                  
    { {       308}, { 92} }, // variable      
    { {       309}, { 93} }, // constant      
    { {        40}, { 94} }, // '('           
    { {       260}, { 36} }, // NAME          
    { {       257}, { 49} }, // INTEGER_NUMBER
    { {       259}, { 50} }, // FLOAT_NUMBER  
    { {         0}, {  0} },                  
};

SR__ s_85[] =
{
    { { REQ_TOKEN}, {  7} },                  
    { {       308}, { 95} }, // variable      
    { {       309}, { 96} }, // constant      
    { {        40}, { 97} }, // '('           
    { {       260}, { 36} }, // NAME          
    { {       257}, { 49} }, // INTEGER_NUMBER
    { {       259}, { 50} }, // FLOAT_NUMBER  
    { {         0}, {  0} },                  
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       258}, { 98} }, // BBNUM
    { {         0}, {  0} },         
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_89[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, { 10} },                          
    { {       306}, { 99} }, // comparision_expression
    { {       307}, { 44} }, // arith_expression      
    { {        45}, { 45} }, // '-'                   
    { {        40}, { 46} }, // '('                   
    { {       308}, { 47} }, // variable              
    { {       309}, { 48} }, // constant              
    { {       260}, { 36} }, // NAME                  
    { {       257}, { 49} }, // INTEGER_NUMBER        
    { {       259}, { 50} }, // FLOAT_NUMBER          
    { {         0}, {  0} },                          
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_93[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_94[] =
{
    { { REQ_TOKEN}, {  10} },                          
    { {       306}, { 100} }, // comparision_expression
    { {       307}, {  44} }, // arith_expression      
    { {        45}, {  45} }, // '-'                   
    { {        40}, {  46} }, // '('                   
    { {       308}, {  47} }, // variable              
    { {       309}, {  48} }, // constant              
    { {       260}, {  36} }, // NAME                  
    { {       257}, {  49} }, // INTEGER_NUMBER        
    { {       259}, {  50} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_97[] =
{
    { { REQ_TOKEN}, {  10} },                          
    { {       306}, { 101} }, // comparision_expression
    { {       307}, {  44} }, // arith_expression      
    { {        45}, {  45} }, // '-'                   
    { {        40}, {  46} }, // '('                   
    { {       308}, {  47} }, // variable              
    { {       309}, {  48} }, // constant              
    { {       260}, {  36} }, // NAME                  
    { {       257}, {  49} }, // INTEGER_NUMBER        
    { {       259}, {  50} }, // FLOAT_NUMBER          
    { {         0}, {   0} },                          
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 102} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_99[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        41}, { 103} }, // ')'
    { {       273}, {  54} }, // GT 
    { {       271}, {  55} }, // LT 
    { {       274}, {  56} }, // GE 
    { {       272}, {  57} }, // LE 
    { {       270}, {  58} }, // EQ 
    { {       269}, {  59} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        41}, { 104} }, // ')'
    { {       273}, {  54} }, // GT 
    { {       271}, {  55} }, // LT 
    { {       274}, {  56} }, // GE 
    { {       272}, {  57} }, // LE 
    { {       270}, {  58} }, // EQ 
    { {       269}, {  59} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {   8} },       
    { {        41}, { 105} }, // ')'
    { {       273}, {  54} }, // GT 
    { {       271}, {  55} }, // LT 
    { {       274}, {  56} }, // GE 
    { {       272}, {  57} }, // LE 
    { {       270}, {  58} }, // EQ 
    { {       269}, {  59} }, // NE 
    { {         0}, {   0} },       
};

SR__ s_102[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       266}, { 106} }, // ELSE
    { {         0}, {   0} },        
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {   2} },        
    { {       267}, { 107} }, // GOTO
    { {         0}, {   0} },        
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       258}, { 108} }, // BBNUM
    { {         0}, {   0} },         
};

SR__ s_108[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {        59}, { 109} }, // ';'
    { {         0}, {   0} },       
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 1:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         program_object.set_procedure_map(current_procedure, get_line_number());
         program_object.global_list_in_proc_map_check();
         }
         #endif
         }
        break;

        case 2:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = new Symbol_Table();
         program_object.set_global_table(*global_table);
         }
         #endif
         }
        break;

        case 3:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table * global_table = d_vsp__[0].symbol_table;
         CHECK_INVARIANT((global_table != NULL), "Global declarations cannot be null");
         program_object.set_global_table(*global_table);
         }
         #endif
         }
        break;

        case 4:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         list<Basic_Block *> * bb_list = d_vsp__[-1].basic_block_list;
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         CHECK_INVARIANT((bb_list != NULL), "Basic block list cannot be null");
         current_procedure->set_basic_block_list(*bb_list);
         }
         #endif
         }
        break;

        case 5:
        d_val__ = d_vsp__[-2];
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[-2].string_value != NULL), "Procedure name cannot be null");
         string proc_name = *d_vsp__[-2].string_value;
         current_procedure = new Procedure(void_data_type, proc_name, get_line_number());
         }
         #endif
         }
        break;

        case 6:
        d_val__ = d_vsp__[-5];
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((current_procedure != NULL), "Current procedure cannot be null");
         Symbol_Table * local_table = d_vsp__[0].symbol_table;
         if (local_table == NULL)
         local_table = new Symbol_Table();
         current_procedure->set_local_list(*local_table);
         }
         #endif
         }
        break;

        case 7:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         d_val__.symbol_table = NULL;
         }
         #endif
         }
        break;

        case 8:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].symbol_table != NULL), "Declaration statement list cannot be null here");
         d_val__.symbol_table = d_vsp__[0].symbol_table;
         }
         #endif
         }
        break;

        case 9:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table_Entry * decl_stmt = d_vsp__[0].symbol_entry;
         CHECK_INVARIANT((decl_stmt != NULL), "Non-terminal declaration statement cannot be null");
         string decl_name = decl_stmt->get_variable_name();
         CHECK_INPUT ((program_object.variable_in_proc_map_check(decl_name) == false),
         "Variable name cannot be same as the procedure name", get_line_number());
         if (current_procedure != NULL)
         {
         CHECK_INPUT((current_procedure->get_proc_name() != decl_name),
         "Variable name cannot be same as procedure name", get_line_number());
         }
         Symbol_Table * decl_list = new Symbol_Table();
         decl_list->push_symbol(decl_stmt);
         d_val__.symbol_table = decl_list;
         }
         #endif
         }
        break;

        case 10:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         
         
         Symbol_Table_Entry * decl_stmt = d_vsp__[0].symbol_entry;
         Symbol_Table * decl_list = d_vsp__[-1].symbol_table;
         CHECK_INVARIANT((decl_stmt != NULL), "The declaration statement cannot be null");
         CHECK_INVARIANT((decl_list != NULL), "The declaration statement list cannot be null");
         string decl_name = decl_stmt->get_variable_name();
         CHECK_INPUT((program_object.variable_in_proc_map_check(decl_name) == false),
         "Procedure name cannot be same as the variable name", get_line_number());
         if (current_procedure != NULL)
         {
         CHECK_INPUT((current_procedure->get_proc_name() != decl_name),
         "Variable name cannot be same as procedure name", get_line_number());
         }
         CHECK_INPUT((decl_list->variable_in_symbol_list_check(decl_name) == false), 
         "Variable is declared twice", get_line_number());
         decl_list->push_symbol(decl_stmt);
         d_val__.symbol_table = decl_list;
         }
         #endif
         }
        break;

        case 11:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         pair<Data_Type, string> * decl_stmt = d_vsp__[-1].decl;
         CHECK_INVARIANT((decl_stmt != NULL), "Declaration cannot be null");
         Data_Type type = decl_stmt->first;
         string decl_name = decl_stmt->second;
         Symbol_Table_Entry * decl_entry = new Symbol_Table_Entry(decl_name, type, get_line_number());
         d_val__.symbol_entry = decl_entry;
         }
         #endif
         }
        break;

        case 12:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Name cannot be null");
         string name = *d_vsp__[0].string_value;
         Data_Type type = int_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.decl = declar;
         }
         #endif
         }
        break;

        case 13:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Name cannot be null");
         string name = *d_vsp__[0].string_value;
         Data_Type type = float_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.decl = declar;
         }
         #endif
         }
        break;

        case 14:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Name cannot be null");
         string name = *d_vsp__[0].string_value;
         Data_Type type = double_data_type;
         pair<Data_Type, string> * declar = new pair<Data_Type, string>(type, name);
         d_val__.decl = declar;
         }
         #endif
         }
        break;

        case 15:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         list<Basic_Block *> * bb_list = d_vsp__[-1].basic_block_list;
         Basic_Block * bb = d_vsp__[0].basic_block;
         CHECK_INVARIANT((bb_list != NULL), "New basic block cannot be null");
         CHECK_INVARIANT((bb != NULL), "Basic block cannot be null");
         bb_strictly_increasing_order_check(bb_list, bb->get_bb_number());
         bb_list->push_back(d_vsp__[0].basic_block);
         d_val__.basic_block_list = bb_list;
         }
         #endif
         }
        break;

        case 16:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         Basic_Block * bb = d_vsp__[0].basic_block;
         CHECK_INVARIANT((bb != NULL), "Basic block cannot be null");
         list<Basic_Block *> * bb_list = new list<Basic_Block *>;
         bb_list->push_back(bb);
         d_val__.basic_block_list = bb_list;
         }
         #endif
         }
        break;

        case 17:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         int bb_number = d_vsp__[-2].integer_value;
         list<Ast *> * exe_stmt = d_vsp__[0].ast_list;
         CHECK_INPUT((bb_number >= 2), "Illegal basic block lable", get_line_number());
         Basic_Block * bb = new Basic_Block(bb_number, get_line_number());
         if (exe_stmt != NULL)
         bb->set_ast_list(*exe_stmt);
         else
         {
         list<Ast *> * ast_list = new list<Ast *>;
         bb->set_ast_list(*ast_list);
         }
         d_val__.basic_block = bb;
         }
         #endif
         }
        break;

        case 18:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         d_val__.ast_list = d_vsp__[0].ast_list;
         }
         #endif
         }
        break;

        case 19:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         list<Ast *> * assign_list = d_vsp__[-2].ast_list;
         Ast * ret = new Return_Ast(get_line_number());
         list<Ast *> * exe_list = NULL;
         if (assign_list)
         exe_list = assign_list;
         else
         exe_list = new list<Ast *>;
         exe_list->push_back(ret);
         d_val__.ast_list = exe_list;
         }
         #endif
         }
        break;

        case 20:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         d_val__.ast_list = NULL;
         }
         #endif
         }
        break;

        case 21:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         list<Ast *> * assign_list = d_vsp__[-1].ast_list;
         Ast * assign_stmt = d_vsp__[0].ast;
         list<Ast *> * assign_list_new = NULL;
         CHECK_INVARIANT((assign_stmt != NULL), "Assignment statement cannot be null");
         if (assign_list == NULL)
         assign_list_new = new list<Ast *>;
         else
         assign_list_new = assign_list;
         assign_list_new->push_back(assign_stmt);
         d_val__.ast_list = assign_list_new;
         }
         #endif
         }
        break;

        case 22:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         CHECK_INVARIANT(((d_vsp__[-3].ast != NULL) && (d_vsp__[-1].ast != NULL)), "lhs/rhs cannot be null");
         Ast * lhs = d_vsp__[-3].ast;
         Ast * rhs = d_vsp__[-1].ast;
         Ast * assign = new Assignment_Ast(lhs, rhs, get_line_number());
         assign->check_ast();
         d_val__.ast = assign;
         }
         #endif
         }
        break;

        case 23:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast = d_vsp__[0].ast;
         }
         #endif
         }
        break;

        case 24:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast = d_vsp__[0].ast;
         }
         #endif
         }
        break;

        case 25:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast = new If_Ast(d_vsp__[-8].ast, d_vsp__[-5].integer_value, d_vsp__[-1].integer_value);
         }
         #endif
         }
        break;

        case 26:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast = new Goto_Ast(d_vsp__[-1].integer_value);
         }
         #endif
         }
        break;

        case 27:
        {
         #if 1
         if(NOT_ONLY_PARSE){ 
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         }
         #endif
         }
        break;

        case 28:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         }
         #endif
         }
        break;

        case 29:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         }
         #endif
         }
        break;

        case 30:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         }
         #endif
         }
        break;

        case 31:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         }
         #endif
         }
        break;

        case 32:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Relational_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,*d_vsp__[-1].string_value);
         }
         #endif
         }
        break;

        case 33:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast = d_vsp__[0].ast;
         }
         #endif
         }
        break;

        case 34:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,0);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 35:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,0);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 36:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-1].ast,NULL,0);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 37:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,1);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 38:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,1);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 39:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-1].ast,NULL,1);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 40:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,2);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 41:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,2);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 42:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-1].ast,NULL,2);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 43:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,1);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 44:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[0].ast,NULL,1);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 45:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-1].ast,NULL,1);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 46:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=d_vsp__[-1].ast;
         }
         #endif
         }
        break;

        case 47:
        { 
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast = d_vsp__[0].ast;
         }
         #endif
         }
        break;

        case 48:
        { 
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast = d_vsp__[0].ast;
         }
         #endif
         }
        break;

        case 49:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,0);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 50:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,1);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 51:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast,2);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 52:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         d_val__.ast=new Arithmetic_Expr_Ast(d_vsp__[-2].ast,d_vsp__[0].ast, 3);
         d_val__.ast->check_ast();
         }
         #endif
         }
        break;

        case 53:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         Symbol_Table_Entry * var_table_entry;
         CHECK_INVARIANT((d_vsp__[0].string_value != NULL), "Variable name cannot be null");
         string var_name = *d_vsp__[0].string_value;
         if (current_procedure->variable_in_symbol_list_check(var_name) == true)
         var_table_entry = &(current_procedure->get_symbol_table_entry(var_name));
         else if (program_object.variable_in_symbol_list_check(var_name) == true)
         var_table_entry = &(program_object.get_symbol_table_entry(var_name));
         else
         CHECK_INVARIANT(CONTROL_SHOULD_NOT_REACH, "Variable has not been declared");
         Ast * name_ast = new Name_Ast(var_name, *var_table_entry, get_line_number());
         d_val__.ast = name_ast;
         }
         #endif
         }
        break;

        case 54:
        {
         #if 1
         if (NOT_ONLY_PARSE)
         {
         int num = d_vsp__[0].integer_value;
         Ast * num_ast = new Number_Ast<int>(num, int_data_type, get_line_number());
         d_val__.ast = num_ast;
         }
         #endif
         }
        break;

        case 55:
        {
         #if 1
         if(NOT_ONLY_PARSE){
         float num = d_vsp__[0].float_value;
         Ast* num_ast = new Number_Ast<float>(num, float_data_type, get_line_number());
         d_val__.ast = num_ast;
         }
         #endif 
         }
        break;

    }
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}

